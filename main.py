import warnings
import tkinter as tk
from tkinter import ttk, messagebox

# Suppress known SyntaxWarning from tkcalendar about an invalid escape sequence in its font string
# This is non-fatal; the package still works. We filter the specific message to avoid noisy output.
warnings.filterwarnings(
    "ignore",
    message=r"invalid escape sequence '\\ '",
    category=SyntaxWarning,
    module=r"tkcalendar\..*",
)
from src.forms.main_form import MainForm
from src.utils import WindowManager, ThemeManager, PathManager, ErrorHandler
import pandas as pd
import logging
from tkinter import filedialog, simpledialog
from typing import Optional
import threading
import time
from src.utils.doc_generator import render_templates
from pathlib import Path

# Configuration du logging
logging.basicConfig(
    filename='app.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MainApp(tk.Tk):
    def __init__(self):
        super().__init__()

        # Configuration de la fen√™tre principale
        WindowManager.setup_window(self, "Gen√©rateurs Docs Juridiques")

        # Initialisation du th√®me
        self.theme_manager = ThemeManager(self)
        self.style = self.theme_manager.style

        # Dictionnaire pour stocker toutes les valeurs
        self.values = {}

        # Cr√©ation de l'interface
        self.setup_gui()

    def setup_gui(self):
        """Configure l'interface utilisateur principale"""
        # Create main container
        self.main_container = ttk.Frame(self)
        self.main_container.pack(fill='both', expand=True)

        # Create the main form
        self.main_form = MainForm(self.main_container, self.values)
        self.main_form.pack(fill='both', expand=True, padx=10, pady=10)

        # Create control buttons
        self.setup_buttons()

    def setup_buttons(self):
        """Configure les boutons de contr√¥le"""
        buttons_frame = ttk.Frame(self)
        buttons_frame.pack(pady=15, side=tk.BOTTOM, fill=tk.X, padx=20)

        # Espace flexible au milieu
        buttons_frame.grid_columnconfigure(2, weight=1)

        # Boutons de g√©n√©ration (gauche)
        ttk.Button(
            buttons_frame,
            text="G√©n√©rer (Word)",
            command=self.generate_docs,
        ).grid(row=0, column=0, padx=5)

        ttk.Button(
            buttons_frame,
            text="G√©n√©rer (Word & PDF)",
            command=self.generate_pdf,
        ).grid(row=0, column=1, padx=5)

        # Dashboard button (left)
        ttk.Button(
            buttons_frame,
            text="üìä Tableau de bord",
            command=self.main_form.show_dashboard,
        ).grid(row=0, column=2, padx=5)

        # Boutons de contr√¥le (droite)
        ttk.Button(
            buttons_frame,
            text="üÜï Nouvelle",
            command=self.clear_form,
        ).grid(row=0, column=3, padx=5)

        ttk.Button(
            buttons_frame,
            text="üíæ Sauvegarder",
            command=self.save_to_db,
        ).grid(row=0, column=4, padx=5)

        ttk.Button(
            buttons_frame,
            text="‚ùå Quitter",
            command=self.quit,
        ).grid(row=0, column=5, padx=5)

    def collect_values(self):
        """Collecte toutes les valeurs des formulaires"""
        # Get values from the main form
        self.values = self.main_form.get_values()

    def generate_docs(self):
        """G√©n√®re les documents Word"""
        try:
            self.collect_values()
            # Provide immediate user feedback while generation logic is implemented
            logger.info("D√©marrage de la g√©n√©ration Word")
            messagebox.showinfo("G√©n√©ration Word", "La g√©n√©ration des documents Word a d√©marr√©.\nV√©rifiez le journal pour la progression.")
            # Example: show a small summary of collected values (non-sensitive)
            summary = f"Soci√©t√©: {self.values.get('societe', {}).get('denomination', '')}\nAssoci√©s: {len(self.values.get('associes', []))}"
            logger.debug(f"Valeurs collect√©es pour g√©n√©ration Word: {self.values}")
            messagebox.showinfo("R√©sum√©", summary)
            logger.info("Documents Word - action user notified")
            # Let user choose which templates to generate
            templates = self.choose_templates()
            if templates is None:
                return
            if not templates:
                messagebox.showinfo("Aucun mod√®le", "Aucun mod√®le s√©lectionn√©. Annulation.")
                return

            out_dir = filedialog.askdirectory(title="Choisir le dossier de sortie")
            if not out_dir:
                return
            to_pdf = messagebox.askyesno("PDF", "Voulez-vous √©galement g√©n√©rer des PDF ?")
            # Start generation with modal progress, passing selected templates
            self.start_generation(out_dir, to_pdf, templates_list=templates)
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration des documents Word: {e}")

    def generate_pdf(self):
        """G√©n√®re les documents Word et PDF"""
        try:
            self.collect_values()
            logger.info("D√©marrage de la g√©n√©ration Word et PDF")
            messagebox.showinfo("G√©n√©ration Word+PDF", "La g√©n√©ration Word + PDF a d√©marr√©.\nV√©rifiez le journal pour la progression.")
            summary = f"Soci√©t√©: {self.values.get('societe', {}).get('denomination', '')}\nAssoci√©s: {len(self.values.get('associes', []))}"
            logger.debug(f"Valeurs collect√©es pour g√©n√©ration PDF: {self.values}")
            messagebox.showinfo("R√©sum√©", summary)
            logger.info("Documents Word+PDF - action user notified")
            templates = self.choose_templates()
            if templates is None:
                return
            if not templates:
                messagebox.showinfo("Aucun mod√®le", "Aucun mod√®le s√©lectionn√©. Annulation.")
                return
            out_dir = filedialog.askdirectory(title="Choisir le dossier de sortie")
            if not out_dir:
                return
            # Force PDF generation
            self.start_generation(out_dir, True, templates_list=templates)
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration des PDF: {e}")

    def start_generation(self, out_dir: str, to_pdf: bool, templates_list: Optional[list] = None):
        """Start generation on a background thread and show modal progress."""
        # Create modal progress window
        progress_win = tk.Toplevel(self)
        progress_win.title("G√©n√©ration en cours")
        progress_win.transient(self)
        progress_win.grab_set()
        ttk.Label(progress_win, text="G√©n√©ration en cours, veuillez patienter...").pack(padx=20, pady=(10, 5))
        pb = ttk.Progressbar(progress_win, mode='indeterminate', length=300)
        pb.pack(padx=20, pady=(0, 10))
        pb.start(10)

        def worker():
            try:
                # call generator (pass templates_list if provided)
                report = render_templates(self.values, str(PathManager.MODELS_DIR), out_dir, to_pdf=to_pdf, templates_list=templates_list)
                # Save a short summary to log
                logging.info('Generation finished, %d templates processed', len(report))
                # Show final message in main thread
                self.after(10, lambda: messagebox.showinfo('G√©n√©ration termin√©e', f"G√©n√©ration termin√©e. Fichiers enregistr√©s dans {out_dir}"))
            except Exception as e:
                logging.exception('Generation failed: %s', e)
                self.after(10, lambda: ErrorHandler.handle_error(e, 'Erreur pendant la g√©n√©ration'))
            finally:
                # stop progress and destroy modal
                self.after(10, lambda: (pb.stop(), progress_win.grab_release(), progress_win.destroy()))

        t = threading.Thread(target=worker, daemon=True)
        t.start()

    def choose_templates(self):
        """Open a modal dialog to let the user pick which .docx templates in Models/ to generate.

        Returns a list of absolute file paths (strings), an empty list if none selected,
        or None if the user cancelled the dialog.
        """
        models_dir = Path(PathManager.MODELS_DIR)
        templates = list(models_dir.glob('*.docx'))

        dlg = tk.Toplevel(self)
        dlg.title('S√©lection des mod√®les')
        dlg.transient(self)
        dlg.grab_set()

        frame = ttk.Frame(dlg)
        frame.pack(fill='both', expand=True, padx=10, pady=10)

        vars_map = {}
        row = 0
        if not templates:
            ttk.Label(frame, text='Aucun mod√®le .docx trouv√© dans le dossier Models/').grid(row=0, column=0)
        else:
            for tpl in templates:
                v = tk.BooleanVar(value=True)
                chk = ttk.Checkbutton(frame, text=tpl.name, variable=v)
                chk.grid(row=row, column=0, sticky='w', pady=2)
                vars_map[tpl] = v
                row += 1

        btn_frame = ttk.Frame(dlg)
        btn_frame.pack(fill='x', pady=(5, 10), padx=10)
        selected = {'value': None}

        def on_ok():
            chosen = [str(p.resolve()) for p, bv in vars_map.items() if bv.get()]
            selected['value'] = chosen
            dlg.grab_release()
            dlg.destroy()

        def on_cancel():
            selected['value'] = None
            dlg.grab_release()
            dlg.destroy()

        ttk.Button(btn_frame, text='OK', command=on_ok).pack(side='right', padx=5)
        ttk.Button(btn_frame, text='Annuler', command=on_cancel).pack(side='right')

        self.wait_window(dlg)
        return selected['value']

    def save_to_db(self):
        """Sauvegarde les donn√©es dans la base"""
        try:
            self.collect_values()

            db_path = PathManager.get_database_path("DataBase_domiciliation.xlsx")

            # Pr√©parer les donn√©es pour chaque feuille
            # Get all values from the main form after collection
            societe_data = {k: [v] for k, v in self.values.get('societe', {}).items()}
            contrat_data = {k: [v] for k, v in self.values.get('contrat', {}).items()}
            associes_data = self.values.get('associes', [])

            # Cr√©er des DataFrames
            df_societe = pd.DataFrame(societe_data)
            df_associes = pd.DataFrame(associes_data)
            df_contrat = pd.DataFrame(contrat_data)

            # Utiliser ExcelWriter pour √©crire sur plusieurs feuilles
            with pd.ExcelWriter(db_path, engine='openpyxl', mode='a', if_sheet_exists='overlay') as writer:
                # Charger les feuilles existantes pour ne pas les √©craser
                if "Societe" in writer.book.sheetnames:
                    startrow = writer.book["Societe"].max_row
                    df_societe.to_excel(writer, sheet_name='Societe', index=False, header=False, startrow=startrow)
                else:
                    df_societe.to_excel(writer, sheet_name='Societe', index=False)

                if "Associes" in writer.book.sheetnames:
                    startrow = writer.book["Associes"].max_row
                    # Ajouter l'ID de la soci√©t√© pour lier les donn√©es
                    df_associes['societe_id'] = societe_data.get('denomination_sociale', [''])[0]
                    df_associes.to_excel(writer, sheet_name='Associes', index=False, header=False, startrow=startrow)
                else:
                    df_associes['societe_id'] = societe_data.get('denomination_sociale', [''])[0]
                    df_associes.to_excel(writer, sheet_name='Associes', index=False)

                if "Contrat" in writer.book.sheetnames:
                    startrow = writer.book["Contrat"].max_row
                    df_contrat.to_excel(writer, sheet_name='Contrat', index=False, header=False, startrow=startrow)
                else:
                    df_contrat.to_excel(writer, sheet_name='Contrat', index=False)

            messagebox.showinfo("Succ√®s", "Donn√©es sauvegard√©es avec succ√®s dans le fichier Excel.")
            logger.info("Donn√©es sauvegard√©es avec succ√®s")

        except Exception as e:
            ErrorHandler.handle_error(e, "Erreur lors de la sauvegarde des donn√©es.")

    def clear_form(self):
        """R√©initialise tous les formulaires"""
        try:
            self.values.clear()
            self.main_form.reset()
            logger.info("Formulaires r√©initialis√©s")
            messagebox.showinfo("Formulaire vid√©", "Tous les champs ont √©t√© r√©initialis√©s.")
        except Exception as e:
            ErrorHandler.handle_error(e, "Erreur lors de la r√©initialisation du formulaire.")

if __name__ == "__main__":
    try:
        app = MainApp()
        app.mainloop()
    except Exception as e:
        logging.critical(f"Failed to start application: {e}", exc_info=True)
        tk.Tk().withdraw()  # Hide root tkinter window
        messagebox.showerror("Application Error", f"A critical error occurred and the application cannot start.\n\nDetails: {e}\n\nCheck app.log for more information.")
