import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import os
from pathlib import Path
import openpyxl
from Main_app import excel_headers, DomiciliationApp
from ttkthemes import ThemedStyle

class DomiciliationDashboard:
    def __init__(self, root):
        self.root = root
        if isinstance(root, tk.Tk):
            self.root.title("Dashboard Domiciliation")
            self.root.geometry("1200x800")

            # Appliquer un th√®me moderne
            self.style = ThemedStyle(self.root)
            self.style.set_theme("arc")  # Th√®me moderne

            # Configurer les styles personnalis√©s
            self.style.configure("Treeview",
                               background="#f0f0f0",
                               foreground="black",
                               rowheight=25,
                               fieldbackground="#f0f0f0")
            self.style.configure("Treeview.Heading",
                               background="#4a90e2",
                               foreground="white",
                               relief="flat")
            self.style.map("Treeview.Heading",
                          background=[("active", "#2171cd")])

            # Configurer le style des boutons
            self.style.configure("Action.TButton",
                               padding=6,
                               relief="flat",
                               background="#4a90e2",
                               foreground="white")
            self.style.map("Action.TButton",
                          background=[("active", "#2171cd")])

        # Cr√©ation de la barre de statut
        self.status_bar = ttk.Label(self.root, text="Pr√™t", relief=tk.SUNKEN, anchor=tk.W)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)

        # Charger les donn√©es
        self.load_data()
        # Cr√©er l'interface
        self.setup_gui()



    def save_data(self, excel_file_path=None):
        """Sauvegarde les donn√©es dans le fichier Excel."""
        if excel_file_path is None:
            excel_file_path = Path(__file__).parent / 'databases' / 'DataBase_domiciliation.xlsx'
        self.df.to_excel(excel_file_path, sheet_name="DataBaseDom", index=False)



    def load_data(self):
        """Charge les donn√©es depuis le fichier Excel ou cr√©e un nouveau fichier si n√©cessaire."""
        try:
            excel_file_path = Path(__file__).parent / 'databases' / 'DataBase_domiciliation.xlsx'
            os.makedirs(os.path.dirname(excel_file_path), exist_ok=True)

            if not os.path.exists(excel_file_path):
                self.df = pd.DataFrame(columns=excel_headers)
                self.save_data(excel_file_path)
                return

            self.df = pd.read_excel(excel_file_path, sheet_name="DataBaseDom", engine='openpyxl')

            for col in excel_headers:
                if col not in self.df.columns:
                    print(f"Ajout de la colonne manquante: {col}")
                    self.df[col] = ""

            # R√©organiser les colonnes dans le m√™me ordre que excel_headers
            self.df = self.df[excel_headers]

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors du chargement des donn√©es: {str(e)}")
            self.df = pd.DataFrame(columns=excel_headers)

    def setup_gui(self):
        # Frame principal pour la barre d'outils
        toolbar_frame = ttk.Frame(self.root)
        toolbar_frame.pack(fill="x", padx=10, pady=5)

        # Frame de recherche (√† gauche)
        search_frame = ttk.LabelFrame(toolbar_frame, text="Recherche avanc√©e", padding="10")
        search_frame.pack(side="left", fill="x", expand=True)

        # Zone de recherche avec style am√©lior√©
        search_container = ttk.Frame(search_frame)
        search_container.pack(fill="x", expand=True)

        ttk.Label(search_container, text="üîç").pack(side="left", padx=5)
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(search_container, textvariable=self.search_var, width=40)
        self.search_entry.pack(side="left", padx=5, fill="x", expand=True)
        self.search_entry.bind('<KeyRelease>', self.search_records)

        # Menu d√©roulant pour le filtre de recherche
        self.filter_var = tk.StringVar(value="Tout")
        filter_menu = ttk.OptionMenu(search_container, self.filter_var, "Tout",
                                   "Soci√©t√©", "G√©rant", "Contrat")
        filter_menu.pack(side="left", padx=5)

        # Frame des boutons (√† droite)
        button_frame = ttk.Frame(toolbar_frame)
        button_frame.pack(side="right", padx=10)

        # Boutons avec style am√©lior√©
        ttk.Button(button_frame, text="‚ûï Ajouter",
                  style="Action.TButton", command=self.add_society).pack(side="left", padx=5)
        ttk.Button(button_frame, text="‚úèÔ∏è Modifier",
                  style="Action.TButton", command=self.edit_society).pack(side="left", padx=5)
        ttk.Button(button_frame, text="üóëÔ∏è Supprimer",
                  style="Action.TButton", command=self.delete_society).pack(side="left", padx=5)
        ttk.Button(button_frame, text="üîÑ Actualiser",
                  style="Action.TButton", command=self.refresh_data).pack(side="left", padx=5)

        # Treeview pour afficher les donn√©es
        self.setup_treeview()

    def setup_treeview(self):
        # Frame pour le treeview avec scrollbar
        tree_frame = ttk.Frame(self.root)
        tree_frame.pack(fill="both", expand=True, padx=10, pady=5)

        # Scrollbars
        y_scrollbar = ttk.Scrollbar(tree_frame)
        y_scrollbar.pack(side="right", fill="y")

        x_scrollbar = ttk.Scrollbar(tree_frame, orient="horizontal")
        x_scrollbar.pack(side="bottom", fill="x")

        # Utiliser toutes les colonnes de excel_headers
        columns = excel_headers

        self.tree = ttk.Treeview(tree_frame, columns=columns, show="headings",
                                yscrollcommand=y_scrollbar.set,
                                xscrollcommand=x_scrollbar.set)

        # Configuration des scrollbars
        y_scrollbar.config(command=self.tree.yview)
        x_scrollbar.config(command=self.tree.xview)

        # Configuration des largeurs de colonnes avec des valeurs par d√©faut
        column_widths = {
            "DEN_STE": 200,        # Plus large pour les noms de soci√©t√©
            "FORME_JUR": 120,      # Largeur standard
            "ICE": 100,            # Plus √©troit pour les num√©ros
            "CAPITAL": 100,        # Plus √©troit pour les montants
            "PART_SOCIAL": 100,    # Plus √©troit pour les montants
            "NATIONALITY": 120,    # Largeur standard
            "STE_ADRESS": 200,     # Plus large pour les adresses
            "DATE_ICE": 100,       # Plus √©troit pour les dates
            "CIVIL": 80,           # Plus √©troit
            "PRENOM": 120,         # Largeur standard
            "NOM": 120,            # Largeur standard
            "DATE_NAISS": 100,     # Plus √©troit pour les dates
            "LIEU_NAISS": 150,     # Largeur standard
            "GERANT_ADRESS": 200,  # Plus large pour les adresses
            "CIN_NUM": 100,        # Plus √©troit pour les num√©ros
            "CIN_VALIDATY": 100,   # Plus √©troit pour les dates
            "GERANT_QUALITY": 120, # Largeur standard
            "GERANT_PHONE": 120,   # Largeur standard
            "GERANT_EMAIL": 150,   # Plus large pour les emails
            "TRIBUNAL": 150,       # Largeur standard
            "PERIOD_DOMCIL": 100,  # Plus √©troit
            "DOM_DATEDEB": 100,    # Plus √©troit pour les dates
            "DOM_DATEFIN": 100,    # Plus √©troit pour les dates
            "DATE_CONTRAT": 100,   # Plus √©troit pour les dates
            "PRIX_CONTRAT": 100,   # Plus √©troit pour les montants
            "PRIX_INTERMEDIARE_CONTRAT": 120,  # Largeur standard
            "INTERMEDIARE": 150    # Largeur standard
        }

        # Noms d'affichage pour toutes les colonnes
        column_names = {
            "DEN_STE": "Soci√©t√©",
            "FORME_JUR": "Forme Juridique",
            "ICE": "ICE",
            "CAPITAL": "Capital",
            "PART_SOCIAL": "Part Social",
            "NATIONALITY": "Nationalit√©",
            "STE_ADRESS": "Adresse Soci√©t√©",
            "DATE_ICE": "Date ICE",
            "CIVIL": "Civilit√©",
            "PRENOM": "Pr√©nom",
            "NOM": "Nom",
            "DATE_NAISS": "Date Naissance",
            "LIEU_NAISS": "Lieu Naissance",
            "GERANT_ADRESS": "Adresse G√©rant",
            "CIN_NUM": "CIN",
            "CIN_VALIDATY": "Validit√© CIN",
            "GERANT_QUALITY": "Qualit√© G√©rant",
            "GERANT_PHONE": "T√©l√©phone",
            "GERANT_EMAIL": "Email",
            "TRIBUNAL": "Tribunal",
            "PERIOD_DOMCIL": "P√©riode",
            "DOM_DATEDEB": "Date D√©but",
            "DOM_DATEFIN": "Date Fin",
            "DATE_CONTRAT": "Date Contrat",
            "PRIX_CONTRAT": "Prix Contrat",
            "PRIX_INTERMEDIARE_CONTRAT": "Prix Interm√©diaire",
            "INTERMEDIARE": "Interm√©diaire"
        }

        for col in columns:
            self.tree.heading(col, text=column_names[col],
                            command=lambda c=col: self.sort_treeview(c))
            self.tree.column(col, width=column_widths[col], minwidth=50)

        self.tree.pack(fill="both", expand=True)
        self.populate_treeview()

    def populate_treeview(self):
        # Effacer les donn√©es existantes
        for item in self.tree.get_children():
            self.tree.delete(item)

        # V√©rifier si le DataFrame est vide
        if self.df.empty:
            return

        # Remplir les valeurs NaN avec des cha√Ænes vides
        df_display = self.df.fillna("")

        # Convertir toutes les valeurs en cha√Ænes
        for col in df_display.columns:
            df_display[col] = df_display[col].astype(str).str.strip()

        # S'assurer que nous avons toutes les colonnes dans le bon ordre
        for col in excel_headers:
            if col not in df_display.columns:
                df_display[col] = ""
        df_display = df_display[excel_headers]

        # Ajouter chaque ligne au Treeview avec toutes les colonnes
        for index, row in df_display.iterrows():
            try:
                values = []
                for col in excel_headers:  # Utiliser excel_headers au lieu de self.tree["columns"]
                    values.append(str(row[col]))
                self.tree.insert("", "end", values=values)
            except Exception as e:
                print(f"Erreur lors de l'ajout de la ligne {index}: {str(e)}")
                print(f"Valeurs : {values}")
                print(f"Colonnes disponibles : {row.index.tolist()}")

    def sort_treeview(self, col):
        # Trier le DataFrame
        self.df = self.df.sort_values(by=[col])
        self.populate_treeview()

    def search_records(self, event=None):
        search_term = self.search_var.get().lower()
        search_filter = self.filter_var.get()

        # Mettre √† jour la barre de statut
        self.status_bar.config(text="Recherche en cours...")
        self.root.update()

        # Effacer les r√©sultats pr√©c√©dents
        for item in self.tree.get_children():
            self.tree.delete(item)

        # Si le terme de recherche est vide, afficher toutes les donn√©es
        if not search_term:
            self.populate_treeview()
            self.status_bar.config(text="Pr√™t")
            return

        # D√©finir les colonnes √† rechercher selon le filtre
        if search_filter == "Soci√©t√©":
            columns = ["DEN_STE", "FORME_JUR", "ICE", "CAPITAL", "STE_ADRESS"]
        elif search_filter == "G√©rant":
            columns = ["CIVIL", "PRENOM", "NOM", "CIN_NUM", "GERANT_QUALITY", "GERANT_PHONE", "GERANT_EMAIL"]
        elif search_filter == "Contrat":
            columns = ["PERIOD_DOMCIL", "DOM_DATEDEB", "DOM_DATEFIN", "DATE_CONTRAT", "PRIX_CONTRAT"]
        else:
            columns = self.df.columns

        # Rechercher dans les colonnes s√©lectionn√©es
        mask = self.df[columns].astype(str).apply(
            lambda x: x.str.contains(search_term, case=False)).any(axis=1)
        filtered_df = self.df[mask]

        # Mettre √† jour la barre de statut avec le nombre de r√©sultats
        self.status_bar.config(text=f"{len(filtered_df)} r√©sultat(s) trouv√©(s)")

        # Afficher les r√©sultats filtr√©s
        for index, row in filtered_df.iterrows():
            try:
                values = []
                for col in self.tree["columns"]:
                    val = row.get(col, "")
                    if pd.isna(val):
                        val = ""
                    values.append(str(val))
                self.tree.insert("", "end", values=values)
            except Exception as e:
                print(f"Erreur lors de l'ajout de la ligne {index}: {str(e)}")

    def refresh_data(self):
        self.load_data()
        self.populate_treeview()
        messagebox.showinfo("Succ√®s", "Donn√©es actualis√©es avec succ√®s!")

    def add_society(self):
        from Main_app import DomiciliationApp

        # Ouvrir une nouvelle fen√™tre pour l'ajout
        add_window = tk.Toplevel(self.root)
        add_window.title("Ajouter une nouvelle soci√©t√©")
        add_window.geometry("1200x800")

        # Cr√©er une instance de DomiciliationApp dans la nouvelle fen√™tre
        app = DomiciliationApp(add_window)

        # Ajouter un bouton personnalis√© pour sauvegarder et fermer
        def save_and_close():
            app.save_to_database()  # Sauvegarder dans la base de donn√©es
            self.refresh_data()     # Actualiser le tableau
            add_window.destroy()    # Fermer la fen√™tre

        save_button = ttk.Button(app.buttons_frame, text="Sauvegarder et Fermer",
                               command=save_and_close)
        save_button.pack(side=tk.LEFT, padx=5)

    def edit_society(self):
        from Main_app import DomiciliationApp

        # Obtenir l'√©l√©ment s√©lectionn√©
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner une soci√©t√© √† modifier.")
            return

        # Obtenir les donn√©es de la soci√©t√© s√©lectionn√©e
        item = self.tree.item(selected_item[0])
        den_ste = item['values'][0]  # Nom de la soci√©t√©

        # Ouvrir une nouvelle fen√™tre pour la modification
        edit_window = tk.Toplevel(self.root)
        edit_window.title(f"Modifier {den_ste}")
        edit_window.geometry("1200x800")

        # Cr√©er une instance de DomiciliationApp dans la nouvelle fen√™tre
        app = DomiciliationApp(edit_window)

        # R√©cup√©rer les donn√©es existantes
        societe_data = self.df[self.df['DEN_STE'] == den_ste].iloc[0]

        # Remplir tous les champs disponibles avec les donn√©es existantes
        field_mappings = {
            'DEN_STE': 'den_ste_var',
            'FORME_JUR': 'forme_jur_var',
            'ICE': 'ice_var',
            'CAPITAL': 'capital_var',
            'PART_SOCIAL': 'part_social_var',
            'NATIONALITY': 'nationality_var',
            'STE_ADRESS': 'ste_adress_var',
            'DATE_ICE': 'date_ice_var',
            'CIVIL': 'civil_var',
            'PRENOM': 'prenom_var',
            'NOM': 'nom_var',
            'DATE_NAISS': 'date_naiss_var',
            'LIEU_NAISS': 'lieu_naiss_var',
            'GERANT_ADRESS': 'gerant_adress_var',
            'CIN_NUM': 'cin_num_var',
            'CIN_VALIDATY': 'cin_validaty_var',
            'GERANT_QUALITY': 'gerant_quality_var',
            'GERANT_PHONE': 'gerant_phone_var',
            'GERANT_EMAIL': 'gerant_email_var',
            'TRIBUNAL': 'tribunal_var',
            'PERIOD_DOMCIL': 'period_var',
            'DOM_DATEDEB': 'date_debut_var',
            'DOM_DATEFIN': 'date_fin_var',
            'DATE_CONTRAT': 'date_contrat_var',
            'PRIX_CONTRAT': 'prix_contrat_var',
            'PRIX_INTERMEDIARE_CONTRAT': 'prix_intermediaire_var',
            'INTERMEDIARE': 'intermediaire_var'
        }

        # Mise √† jour de tous les champs disponibles
        for excel_col, var_name in field_mappings.items():
            if hasattr(app, var_name) and excel_col in societe_data:
                try:
                    getattr(app, var_name).set(societe_data[excel_col])
                except Exception as e:
                    print(f"Erreur lors de la mise √† jour du champ {excel_col}: {str(e)}")

    def delete_society(self):
        selected_item = self.tree.selection()
        if not selected_item:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner une soci√©t√© √† supprimer.")
            return

        if messagebox.askyesno("Confirmation", "√ätes-vous s√ªr de vouloir supprimer cette soci√©t√©?"):
            item = self.tree.item(selected_item[0])
            den_ste = item['values'][0]  # Nom de la soci√©t√©

            print(f"Tentative de suppression de la soci√©t√©: {den_ste}")  # Debug
            print("DataFrame avant suppression:", self.df['DEN_STE'].tolist())  # Debug

            # Supprimer du DataFrame (cette ligne filtre pour garder toutes les soci√©t√©s SAUF celle √† supprimer)
            self.df = self.df[self.df['DEN_STE'].str.strip() != str(den_ste).strip()]

            print("DataFrame apr√®s suppression:", self.df['DEN_STE'].tolist())  # Debug

            # Sauvegarder dans Excel
            try:
                excel_file_path = Path(__file__).parent / 'databases' / 'DataBase_domiciliation.xlsx'

                if len(self.df) == 0:  # Si le DataFrame est vide
                    # Cr√©er un nouveau fichier vide
                    self.save_data(excel_file_path)
                else:
                    # Sauvegarder les donn√©es
                    with pd.ExcelWriter(excel_file_path, engine='openpyxl') as writer:
                        self.df.to_excel(writer, sheet_name="DataBaseDom", index=False)

                messagebox.showinfo("Succ√®s", "Soci√©t√© supprim√©e avec succ√®s!")
                self.refresh_data()
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la suppression: {str(e)}")

if __name__ == "__main__":
    root = tk.Tk()
    app = DomiciliationDashboard(root)
    root.mainloop()
