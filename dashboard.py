import tkinter as tk
from tkinter import ttk
import pandas as pd
import os
from utils import ThemeManager, WidgetFactory
from tkinter import ttk, messagebox
import pandas as pd
import os
from pathlib import Path
import openpyxl
from Main_app import societe_headers, associe_headers, contrat_headers, DomiciliationApp
from utils import ThemeManager, WidgetFactory, PathManager

# Combine all headers for the dashboard view
# We keep all headers including IDs as they're needed for data operations
excel_headers = societe_headers + associe_headers[2:] + contrat_headers[2:]  # Skip ID fields from associe and contrat

# Headers to display in the treeview (excluding technical IDs)
display_headers = [h for h in excel_headers if not h.startswith('ID_')]

class DomiciliationDashboard:
    def __init__(self, root):
        self.root = root

        # Determine if we're working with a root window or a frame
        if isinstance(root, tk.Tk):
            self.root.title("Dashboard Domiciliation")
            self.root.geometry("1200x800")
            window = root
        else:
            window = root.winfo_toplevel()

        # Configuration du th√®me et des styles
        self.theme_manager = ThemeManager(window)
        self.style = self.theme_manager.style

        # Configuration initiale
        self.setup_styles()
        self.setup_column_configs()

        # Cr√©ation de la barre de statut
        self.status_bar = ttk.Label(self.root, text="Pr√™t", relief=tk.SUNKEN, anchor=tk.W)
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)

        # Charger les donn√©es
        self.load_data()
        # Cr√©er l'interface
        self.setup_gui()

    def setup_styles(self):
        """Configure les styles personnalis√©s pour le dashboard"""
        # Style du Treeview
        self.style.configure('Custom.Treeview',
                           rowheight=30,
                           font=('Segoe UI', 9))
        self.style.configure('Custom.Treeview.Heading',
                           font=('Segoe UI', 9, 'bold'))

        # Style des boutons de contr√¥le
        self.style.configure('Control.TButton',
                           padding=(10, 5),
                           font=('Segoe UI', 9))

        # Style des filtres
        self.style.configure('Filter.TFrame',
                           padding=10)

        # Style de la barre d'outils
        self.style.configure('Toolbar.TFrame',
                           padding=5)

        # Style des labels d'info
        self.style.configure('Info.TLabel',
                           font=('Segoe UI', 9),
                           padding=(5, 2))
        """Configure les styles pour les widgets"""
        # Style pour les Treeviews
        self.style.configure("Treeview",
                           rowheight=25,
                           fieldbackground=self.theme_manager.colors['bg'])
        # Style pour les en-t√™tes avec texte en gras et centr√©
        self.style.configure("Treeview.Heading",
                           background="#4a90e2",
                           foreground="white",
                           relief="flat",
                           font=('TkDefaultFont', 9, 'bold'),  # Ajout du style gras
                           justify='center')  # Centrage du texte
        self.style.map("Treeview.Heading",
                      background=[("active", "#2171cd")])

        # Style pour les boutons
        self.style.configure("Action.TButton",
                           padding=6,
                           relief="flat",
                           background="#4a90e2",
                           foreground="white")
        self.style.map("Action.TButton",
                      background=[("active", "#2171cd")])

    def setup_column_configs(self):
        """Configure les colonnes et leurs propri√©t√©s"""
        # Configuration des largeurs de colonnes
        self.column_widths = {
            # Colonnes de la soci√©t√©
            "DEN_STE": 200,        # Plus large pour les noms de soci√©t√©
            "FORME_JUR": 120,      # Largeur standard
            "ICE": 100,            # Plus √©troit pour les num√©ros
            "CAPITAL": 100,        # Plus √©troit pour les montants
            "PART_SOCIAL": 100,    # Plus √©troit pour les montants
            "STE_ADRESS": 200,     # Plus large pour les adresses
            "DATE_ICE": 100,       # Plus √©troit pour les dates
            "TRIBUNAL": 150,       # Largeur standard

            # Colonnes des associ√©s
            "CIVIL": 80,           # Plus √©troit
            "PRENOM": 120,         # Largeur standard
            "NOM": 120,            # Largeur standard
            "NATIONALITY": 120,    # Largeur standard
            "CIN_NUM": 100,        # Plus √©troit pour les num√©ros
            "CIN_VALIDATY": 100,   # Plus √©troit pour les dates
            "DATE_NAISS": 100,     # Plus √©troit pour les dates
            "LIEU_NAISS": 150,     # Largeur standard
            "ADRESSE": 200,        # Plus large pour les adresses
            "PHONE": 120,          # Largeur standard
            "EMAIL": 150,          # Plus large pour les emails
            "PARTS": 80,           # Plus √©troit
            "IS_GERANT": 80,       # Plus √©troit
            "QUALITY": 120,        # Largeur standard

            # Colonnes du contrat
            "PERIOD_DOMCIL": 100,  # Plus √©troit
            "PRIX_CONTRAT": 100,   # Plus √©troit pour les montants
            "PRIX_INTERMEDIARE_CONTRAT": 120,  # Largeur standard
            "DOM_DATEDEB": 100,    # Plus √©troit pour les dates
            "DOM_DATEFIN": 100,    # Plus √©troit pour les dates
        }

        # Noms d'affichage pour les colonnes
        self.column_names = {
            # Colonnes de la soci√©t√©
            "DEN_STE": "Soci√©t√©",
            "FORME_JUR": "Forme Juridique",
            "ICE": "ICE",
            "CAPITAL": "Capital",
            "PART_SOCIAL": "Part Social",
            "STE_ADRESS": "Adresse Soci√©t√©",
            "DATE_ICE": "Date ICE",
            "TRIBUNAL": "Tribunal",

            # Colonnes des associ√©s
            "CIVIL": "Civilit√©",
            "PRENOM": "Pr√©nom",
            "NOM": "Nom",
            "NATIONALITY": "Nationalit√©",
            "CIN_NUM": "CIN",
            "CIN_VALIDATY": "Validit√© CIN",
            "DATE_NAISS": "Date Naissance",
            "LIEU_NAISS": "Lieu Naissance",
            "ADRESSE": "Adresse",
            "PHONE": "T√©l√©phone",
            "EMAIL": "Email",
            "PARTS": "Parts",
            "IS_GERANT": "Est G√©rant",
            "QUALITY": "Qualit√©",

            # Colonnes du contrat
            "PERIOD_DOMCIL": "P√©riode",
            "PRIX_CONTRAT": "Prix Contrat",
            "PRIX_INTERMEDIARE_CONTRAT": "Prix Interm√©diaire",
            "DOM_DATEDEB": "Date D√©but",
            "DOM_DATEFIN": "Date Fin"
        }

    def save_data(self, excel_file_path=None):
        """Sauvegarde les donn√©es dans le fichier Excel."""
        if excel_file_path is None:
            excel_file_path = Path(__file__).parent / 'databases' / 'DataBase_domiciliation.xlsx'
        self.df.to_excel(excel_file_path, sheet_name="DataBaseDom", index=False)



    def load_data(self):
        """Charge les donn√©es depuis le fichier Excel ou cr√©e un nouveau fichier si n√©cessaire."""
        try:
            PathManager.ensure_directories()
            excel_file_path = PathManager.get_database_path('DataBase_domiciliation.xlsx')

            if not excel_file_path.exists():
                self.df = pd.DataFrame(columns=excel_headers)
                self.save_data(excel_file_path)
                return

            self.df = pd.read_excel(excel_file_path, sheet_name="DataBaseDom", engine='openpyxl')

            for col in excel_headers:
                if col not in self.df.columns:
                    self.df[col] = ""  # Ajout silencieux des colonnes manquantes

            # R√©organiser les colonnes dans le m√™me ordre que excel_headers
            self.df = self.df[excel_headers]

        except Exception as e:
            messagebox.showerror("Erreur", f"Erreur lors du chargement des donn√©es: {str(e)}")
            self.df = pd.DataFrame(columns=excel_headers)

    def setup_gui(self):
        # Frame principal pour la barre d'outils
        toolbar_frame = ttk.Frame(self.root)
        toolbar_frame.pack(fill="x", padx=10, pady=5)

        # Frame de recherche (√† gauche)
        search_frame = ttk.LabelFrame(toolbar_frame, text="Recherche avanc√©e", padding="10")
        search_frame.pack(side="left", fill="x", expand=True)

        # Zone de recherche avec style am√©lior√©
        search_container = ttk.Frame(search_frame)
        search_container.pack(fill="x", expand=True)

        ttk.Label(search_container, text="üîç").pack(side="left", padx=5)
        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(search_container, textvariable=self.search_var, width=40)
        self.search_entry.pack(side="left", padx=5, fill="x", expand=True)
        self.search_entry.bind('<KeyRelease>', self.search_records)

        # Menu d√©roulant pour le filtre de recherche
        self.filter_var = tk.StringVar(value="Tout")
        filter_menu = ttk.OptionMenu(search_container, self.filter_var,
                                     "Tout","Soci√©t√©", "G√©rant", "Contrat")
        filter_menu.pack(side="left", padx=5)

        # Frame des boutons (√† droite)
        button_frame = ttk.Frame(toolbar_frame)
        button_frame.pack(side="right", padx=10)

        # Boutons avec style am√©lior√©
        ttk.Button(button_frame, text="‚ûï Ajouter",
                  style="Action.TButton", command=self.add_society).pack(side="left", padx=5)
        ttk.Button(button_frame, text="‚úèÔ∏è Modifier",
                  style="Action.TButton", command=self.edit_society).pack(side="left", padx=5)
        ttk.Button(button_frame, text="üóëÔ∏è Supprimer",
                  style="Action.TButton", command=self.delete_society).pack(side="left", padx=5)
        ttk.Button(button_frame, text="üîÑ Actualiser",
                  style="Action.TButton", command=self.refresh_data).pack(side="left", padx=5)

        # Treeview pour afficher les donn√©es
        self.setup_treeview()

    def create_treeview(self, parent, columns, title):
        """Cr√©e un treeview avec scrollbars"""
        # Frame pour contenir le treeview
        frame = ttk.LabelFrame(parent, text=title, padding="2")
        frame.pack(fill="both", padx=2, pady=1)  # R√©duit les marges

        # Frame interne pour le treeview et les scrollbars
        tree_frame = ttk.Frame(frame)
        tree_frame.pack(fill="both", expand=True)

        # Style pour les lignes de soci√©t√© (en gras)
        self.style.configure("societe.Treeview", font=('TkDefaultFont', 9, 'bold'))

        # D√©finir une hauteur fixe pour le treeview
        height = 8 if title == "Soci√©t√©s" else 6  # Hauteur augment√©e pour Associ√©s et Contrats

        # Scrollbars
        y_scrollbar = ttk.Scrollbar(tree_frame)
        y_scrollbar.pack(side="right", fill="y")

        x_scrollbar = ttk.Scrollbar(tree_frame, orient="horizontal")
        x_scrollbar.pack(side="bottom", fill="x")

        # Cr√©ation du treeview avec hauteur fixe
        tree = ttk.Treeview(tree_frame, columns=columns, show="headings",
                           yscrollcommand=y_scrollbar.set,
                           xscrollcommand=x_scrollbar.set,
                           height=height)  # D√©finir la hauteur en nombre de lignes

        # Configuration des scrollbars
        y_scrollbar.config(command=tree.yview)
        x_scrollbar.config(command=tree.xview)

        # Configuration des colonnes avec centrage
        for col in columns:
            tree.heading(col, text=self.column_names[col],
                        command=lambda c=col: self.sort_treeview(tree, c))
            tree.column(col, width=self.column_widths[col], minwidth=50, anchor='center')

        tree.pack(fill="both", expand=True)
        return tree

    def setup_treeview(self):
        # Cr√©er un canvas avec scrollbar pour contenir tous les treeviews
        canvas = tk.Canvas(self.root)
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=canvas.yview)

        # Frame principal qui contiendra tous les treeviews
        main_frame = ttk.Frame(canvas)

        # Configurer le canvas
        canvas.configure(yscrollcommand=scrollbar.set)

        # Pack le canvas et la scrollbar
        scrollbar.pack(side="right", fill="y")
        canvas.pack(side="left", fill="both", expand=True)

        # Cr√©er une fen√™tre dans le canvas avec le main_frame
        canvas.create_window((0, 0), window=main_frame, anchor="nw", width=canvas.winfo_width())

        # Cr√©er les trois panneaux verticaux avec des poids diff√©rents
        societe_frame = ttk.Frame(main_frame)
        societe_frame.pack(side="top", fill="both", expand=True, pady=1)

        associe_frame = ttk.Frame(main_frame)
        associe_frame.pack(side="top", fill="both", expand=True, pady=1)

        contrat_frame = ttk.Frame(main_frame)
        contrat_frame.pack(side="top", fill="both", expand=True, pady=1)

        # Fonction pour mettre √† jour la r√©gion de d√©filement
        def _on_frame_configure(event=None):
            canvas.configure(scrollregion=canvas.bbox("all"))

        # Lier la configuration du frame
        main_frame.bind("<Configure>", _on_frame_configure)

        # Lier le redimensionnement de la fen√™tre
        def _on_canvas_configure(event):
            canvas.itemconfig(canvas.find_withtag("all")[0], width=event.width)

        canvas.bind("<Configure>", _on_canvas_configure)

        # Configurer le d√©filement avec la molette de la souris
        def _on_mousewheel(event):
            try:
                canvas.yview_scroll(int(-1*(event.delta/120)), "units")
            except Exception as e:
                print(f"Erreur de d√©filement: {str(e)}")  # Pour le d√©bogage
                pass

        # Lier l'√©v√©nement de la molette uniquement au canvas et √† ses enfants
        canvas.bind("<MouseWheel>", _on_mousewheel)
        main_frame.bind("<MouseWheel>", _on_mousewheel)
        # Assurer que le d√©filement fonctionne aussi sur les widgets enfants
        for frame in [societe_frame, associe_frame, contrat_frame]:
            frame.bind("<MouseWheel>", _on_mousewheel)
            for child in frame.winfo_children():
                child.bind("<MouseWheel>", _on_mousewheel)

        # Unbind events when destroying the widget
        def _on_destroy(event):
            try:
                canvas.unbind_all("<MouseWheel>")
            except:
                pass

        canvas.bind("<Destroy>", _on_destroy)

        # D√©finir les colonnes pour chaque treeview

        # D√©finir les colonnes pour chaque treeview (en excluant les IDs)
        societe_columns = [
            "DEN_STE", "FORME_JUR", "ICE", "CAPITAL", "PART_SOCIAL",
            "STE_ADRESS", "DATE_ICE", "TRIBUNAL"
        ]

        associe_columns = [
            "DEN_STE",  # Ajout du nom de la soci√©t√©
            "CIVIL", "PRENOM", "NOM", "NATIONALITY", "CIN_NUM", "CIN_VALIDATY",
            "DATE_NAISS", "LIEU_NAISS", "ADRESSE", "PHONE", "EMAIL",
            "PARTS", "IS_GERANT", "QUALITY"
        ]

        contrat_columns = [
            "DEN_STE",  # Ajout du nom de la soci√©t√©
            "PERIOD_DOMCIL", "PRIX_CONTRAT", "PRIX_INTERMEDIARE_CONTRAT",
            "DOM_DATEDEB", "DOM_DATEFIN"
        ]

        # Cr√©er les trois treeviews
        self.societe_tree = self.create_treeview(societe_frame, societe_columns, "Soci√©t√©s")
        self.associe_tree = self.create_treeview(associe_frame, associe_columns, "Associ√©s")
        self.contrat_tree = self.create_treeview(contrat_frame, contrat_columns, "Contrats")

        # Appeler populate_treeviews apr√®s la cr√©ation
        self.populate_treeviews()

        # Configuration des colonnes sp√©cifiques √† chaque vue
        column_widths = {
            # Colonnes de la soci√©t√©
            "ID_SOCIETE": 100,     # ID technique
            "DEN_STE": 200,        # Plus large pour les noms de soci√©t√©
            "FORME_JUR": 120,      # Largeur standard
            "ICE": 100,            # Plus √©troit pour les num√©ros
            "CAPITAL": 100,        # Plus √©troit pour les montants
            "PART_SOCIAL": 100,    # Plus √©troit pour les montants
            "STE_ADRESS": 200,     # Plus large pour les adresses
            "DATE_ICE": 100,       # Plus √©troit pour les dates
            "TRIBUNAL": 150,       # Largeur standard

            # Colonnes des associ√©s
            "CIVIL": 80,           # Plus √©troit
            "PRENOM": 120,         # Largeur standard
            "NOM": 120,            # Largeur standard
            "NATIONALITY": 120,    # Largeur standard
            "CIN_NUM": 100,        # Plus √©troit pour les num√©ros
            "CIN_VALIDATY": 100,   # Plus √©troit pour les dates
            "DATE_NAISS": 100,     # Plus √©troit pour les dates
            "LIEU_NAISS": 150,     # Largeur standard
            "ADRESSE": 200,        # Plus large pour les adresses
            "PHONE": 120,          # Largeur standard
            "EMAIL": 150,          # Plus large pour les emails
            "PARTS": 80,           # Plus √©troit
            "IS_GERANT": 80,       # Plus √©troit
            "QUALITY": 120,        # Largeur standard

            # Colonnes du contrat
            "PERIOD_DOMCIL": 100,  # Plus √©troit
            "PRIX_CONTRAT": 100,   # Plus √©troit pour les montants
            "PRIX_INTERMEDIARE_CONTRAT": 120,  # Largeur standard
            "DOM_DATEDEB": 100,    # Plus √©troit pour les dates
            "DOM_DATEFIN": 100,    # Plus √©troit pour les dates
        }

        # Noms d'affichage pour toutes les colonnes
        column_names = {
            # Colonnes de la soci√©t√©
            "ID_SOCIETE": "ID Soci√©t√©",
            "DEN_STE": "Soci√©t√©",
            "FORME_JUR": "Forme Juridique",
            "ICE": "ICE",
            "CAPITAL": "Capital",
            "PART_SOCIAL": "Part Social",
            "STE_ADRESS": "Adresse Soci√©t√©",
            "DATE_ICE": "Date ICE",
            "TRIBUNAL": "Tribunal",

            # Colonnes des associ√©s
            "CIVIL": "Civilit√©",
            "PRENOM": "Pr√©nom",
            "NOM": "Nom",
            "NATIONALITY": "Nationalit√©",
            "CIN_NUM": "CIN",
            "CIN_VALIDATY": "Validit√© CIN",
            "DATE_NAISS": "Date Naissance",
            "LIEU_NAISS": "Lieu Naissance",
            "ADRESSE": "Adresse",
            "PHONE": "T√©l√©phone",
            "EMAIL": "Email",
            "PARTS": "Parts",
            "IS_GERANT": "Est G√©rant",
            "QUALITY": "Qualit√©",

            # Colonnes du contrat
            "PERIOD_DOMCIL": "P√©riode",
            "PRIX_CONTRAT": "Prix Contrat",
            "PRIX_INTERMEDIARE_CONTRAT": "Prix Interm√©diaire",
            "DOM_DATEDEB": "Date D√©but",
            "DOM_DATEFIN": "Date Fin"
        }

        # Removed redundant code - treeview configuration is now handled in create_treeview
        self.populate_treeviews()

    def populate_treeviews(self):
        """Remplit les trois treeviews avec les donn√©es correspondantes"""
        # V√©rifier si le DataFrame est vide
        if self.df.empty:
            return

        # Effacer les donn√©es existantes
        self.clear_all_treeviews()

        # Remplir les valeurs NaN avec des cha√Ænes vides
        df_display = self.df.fillna("")

        # Convertir toutes les valeurs en cha√Ænes
        for col in df_display.columns:
            df_display[col] = df_display[col].astype(str).str.strip()

        # Grouper les donn√©es par soci√©t√© en utilisant DEN_STE au lieu de ID_SOCIETE
        for societe_name in df_display['DEN_STE'].unique():
            # Donn√©es de la soci√©t√©
            societe_data = df_display[df_display['DEN_STE'] == societe_name]
            if not societe_data.empty:
                self.populate_societe_tree(societe_data.iloc[0])
                self.populate_associe_tree(societe_data)
                self.populate_contrat_tree(societe_data)

        # Mettre √† jour le statut avec le nombre total de soci√©t√©s
        total_societes = len(df_display['DEN_STE'].unique())
        self.status_bar.config(text=f"Total des soci√©t√©s : {total_societes}")

    def populate_societe_tree(self, societe_row):
        """Remplit le treeview des soci√©t√©s"""
        values = []
        for col in self.societe_tree['columns']:
            values.append(str(societe_row.get(col, "")))

        # Cr√©er un ID unique pour chaque entr√©e en utilisant DEN_STE
        iid = f"soc_{societe_row['DEN_STE']}"

        # V√©rifier si cette soci√©t√© existe d√©j√† dans le treeview
        existing_items = self.societe_tree.get_children()
        exists = False
        for item in existing_items:
            if self.societe_tree.item(item)['values'][0] == societe_row['DEN_STE']:
                exists = True
                break

        # Ins√©rer seulement si la soci√©t√© n'existe pas d√©j√†
        if not exists:
            self.societe_tree.insert("", "end", values=values, iid=iid)

    def populate_associe_tree(self, societe_data):
        """Remplit le treeview des associ√©s"""
        if not societe_data.empty:
            societe_name = societe_data.iloc[0]['DEN_STE']
            # Cr√©er un parent node pour la soci√©t√© avec un ID unique bas√© sur le nom
            societe_iid = f"soc_assoc_{societe_name}"

            # V√©rifier si ce n≈ìud de soci√©t√© existe d√©j√†
            existing_items = self.associe_tree.get_children()
            if societe_iid not in existing_items:
                self.associe_tree.insert("", "end", values=[societe_name] + ["" for _ in range(len(self.associe_tree['columns'])-1)],
                                       iid=societe_iid, tags=('societe',))

            # Ajouter les associ√©s sous le noeud de la soci√©t√©
            for idx, row in societe_data.iterrows():
                values = [societe_name]  # Ajouter le nom de la soci√©t√© comme premi√®re colonne
                for col in self.associe_tree['columns'][1:]:  # Skip first column which is DEN_STE
                    values.append(str(row.get(col, "")))
                # Cr√©er un ID unique pour chaque associ√©
                iid = f"assoc_{societe_name}_{idx}"
                self.associe_tree.insert(societe_iid, "end", values=values, iid=iid)  # Ins√©rer sous le parent

    def populate_contrat_tree(self, societe_data):
        """Remplit le treeview des contrats"""
        if not societe_data.empty:
            societe_name = societe_data.iloc[0]['DEN_STE']
            # Cr√©er un parent node pour la soci√©t√©
            societe_iid = f"soc_cont_{societe_data.iloc[0]['ID_SOCIETE']}"

        # V√©rifier si ce n≈ìud de soci√©t√© existe d√©j√†
        existing_items = self.contrat_tree.get_children()
        if societe_iid not in existing_items:
            self.contrat_tree.insert("", "end", values=[societe_name] + ["" for _ in range(len(self.contrat_tree['columns'])-1)],
                                   iid=societe_iid, tags=('societe',))

        # Ajouter les contrats sous le noeud de la soci√©t√©
        for idx, row in societe_data.iterrows():
            values = [societe_name]  # Ajouter le nom de la soci√©t√© comme premi√®re colonne
            for col in self.contrat_tree['columns'][1:]:
                values.append(str(row.get(col, "")))
            # Cr√©er un ID unique pour chaque contrat
            iid = f"cont_{societe_name}_{idx}"
            self.contrat_tree.insert(societe_iid, "end", values=values, iid=iid)

        return

    def clear_all_treeviews(self):
       #Efface les donn√©es de tous les treeviews"""
       for tree in [self.societe_tree, self.associe_tree, self.contrat_tree]:
          for item in tree.get_children():
            tree.delete(item)

    def sort_treeview(self, tree, col):
        """Trie un treeview sp√©cifique selon une colonne"""
        # R√©cup√©rer toutes les lignes
        items = [(tree.set(item, col), item) for item in tree.get_children("")]

        # Trier les lignes
        items.sort()

        # R√©organiser les lignes dans le treeview
        for index, (val, item) in enumerate(items):
            tree.move(item, "", index)

        return

    def search_records(self, event=None):
        search_term = self.search_var.get().lower()
        search_filter = self.filter_var.get()

        # Mettre √† jour la barre de statut
        self.status_bar.config(text="Recherche en cours...")
        self.root.update()

        # Effacer les r√©sultats pr√©c√©dents
        self.clear_all_treeviews()

                # Si le terme de recherche est vide, afficher toutes les donn√©es
        if not search_term:
            self.populate_treeviews()
            self.status_bar.config(text="Pr√™t")
            return

        # D√©finir les colonnes √† rechercher selon le filtre
        if search_filter == "Soci√©t√©":
            search_columns = ["DEN_STE", "FORME_JUR", "ICE", "CAPITAL", "STE_ADRESS"]
            trees_to_search = [self.societe_tree]
        elif search_filter == "Associ√©s":
            search_columns = ["CIVIL", "PRENOM", "NOM", "CIN_NUM", "PHONE", "EMAIL"]
            trees_to_search = [self.associe_tree]
        elif search_filter == "Contrat":
            search_columns = ["PERIOD_DOMCIL", "DOM_DATEDEB", "DOM_DATEFIN", "PRIX_CONTRAT"]
            trees_to_search = [self.contrat_tree]
        else:
            # Pour "Tout", rechercher dans toutes les colonnes
            trees_to_search = [self.societe_tree, self.associe_tree, self.contrat_tree]
            search_columns = self.df.columns

        # Rechercher dans les colonnes s√©lectionn√©es
        mask = self.df[search_columns].astype(str).apply(
            lambda x: x.str.contains(search_term, case=False)).any(axis=1)
        filtered_df = self.df[mask]

        # Mettre √† jour la barre de statut avec le nombre de r√©sultats
        self.status_bar.config(text=f"{len(filtered_df)} r√©sultat(s) trouv√©(s)")

        # Afficher les r√©sultats filtr√©s
        for societe_id in filtered_df['ID_SOCIETE'].unique():
            societe_data = filtered_df[filtered_df['ID_SOCIETE'] == societe_id]
            if not societe_data.empty:
                if self.societe_tree in trees_to_search:
                    self.populate_societe_tree(societe_data.iloc[0])
                if self.associe_tree in trees_to_search:
                    self.populate_associe_tree(societe_data)
                if self.contrat_tree in trees_to_search:
                    self.populate_contrat_tree(societe_data)

    def refresh_data(self):
        self.load_data()
        self.populate_treeviews()
        messagebox.showinfo("Succ√®s", "Donn√©es actualis√©es avec succ√®s!")

    def add_society(self):
        from Main_app import DomiciliationApp
        from utils import WindowManager

        # Trouver la fen√™tre principale
        main_window = self.root.winfo_toplevel()

        # Masquer la fen√™tre principale
        main_window.withdraw()

        # Cr√©er une nouvelle fen√™tre pour l'ajout
        add_window = tk.Toplevel(main_window)
        WindowManager.setup_window(add_window, "Ajouter une nouvelle soci√©t√©")

        # Cr√©er une instance de DomiciliationApp dans la nouvelle fen√™tre
        app = DomiciliationApp(add_window)

        # Ajouter un bouton personnalis√© pour sauvegarder et fermer
        def save_and_close():
            app.save_to_database()  # Sauvegarder dans la base de donn√©es
            self.refresh_data()     # Actualiser le tableau
            add_window.destroy()    # Fermer la fen√™tre
            main_window.deiconify()   # R√©afficher la fen√™tre principale

        def on_closing():
            add_window.destroy()    # Fermer la fen√™tre
            main_window.deiconify()   # R√©afficher la fen√™tre principale

        WidgetFactory.create_button(
            app.buttons_frame,
            text="üíæ Sauvegarder et Fermer",
            command=save_and_close,
            style='Secondary.TButton',
            tooltip="Sauvegarder les modifications et fermer la fen√™tre"
        ).grid(row=0, column=6, padx=5)

        # Configurer le gestionnaire de fermeture de fen√™tre
        add_window.protocol("WM_DELETE_WINDOW", on_closing)

    def edit_society(self):
        from Main_app import DomiciliationApp
        from utils import WindowManager

        # Obtenir l'√©l√©ment s√©lectionn√©
        selected_item = self.societe_tree.selection()
        if not selected_item:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner une soci√©t√© √† modifier.")
            return

        # Obtenir les donn√©es de la soci√©t√© s√©lectionn√©e
        item = self.societe_tree.item(selected_item[0])
        den_ste = item['values'][0]  # Nom de la soci√©t√©

        # Trouver la fen√™tre principale
        main_window = self.root.winfo_toplevel()

        # Masquer la fen√™tre principale
        main_window.withdraw()

        # Ouvrir une nouvelle fen√™tre pour la modification
        edit_window = tk.Toplevel(main_window)
        WindowManager.setup_window(edit_window, f"Modifier {den_ste}")

        # Cr√©er une instance de DomiciliationApp dans la nouvelle fen√™tre
        app = DomiciliationApp(edit_window)

        # R√©cup√©rer les donn√©es existantes
        societe_data = self.df[self.df['DEN_STE'] == den_ste].iloc[0]

        # Remplir tous les champs disponibles avec les donn√©es existantes
        field_mappings = {
            'DEN_STE': 'den_ste_var',
            'FORME_JUR': 'forme_jur_var',
            'ICE': 'ice_var',
            'CAPITAL': 'capital_var',
            'PART_SOCIAL': 'part_social_var',
            'NATIONALITY': 'nationality_var',
            'STE_ADRESS': 'ste_adress_var',
            'DATE_ICE': 'date_ice_var',
            'CIVIL': 'civil_var',
            'PRENOM': 'prenom_var',
            'NOM': 'nom_var',
            'DATE_NAISS': 'date_naiss_var',
            'LIEU_NAISS': 'lieu_naiss_var',
            'GERANT_ADRESS': 'gerant_adress_var',
            'CIN_NUM': 'cin_num_var',
            'CIN_VALIDATY': 'cin_validaty_var',
            'GERANT_QUALITY': 'gerant_quality_var',
            'GERANT_PHONE': 'gerant_phone_var',
            'GERANT_EMAIL': 'gerant_email_var',
            'TRIBUNAL': 'tribunal_var',
            'PERIOD_DOMCIL': 'period_var',
            'DOM_DATEDEB': 'date_debut_var',
            'DOM_DATEFIN': 'date_fin_var',
            'DATE_CONTRAT': 'date_contrat_var',
            'PRIX_CONTRAT': 'prix_contrat_var',
            'PRIX_INTERMEDIARE_CONTRAT': 'prix_intermediaire_var',
            'INTERMEDIARE': 'intermediaire_var'
        }

        # Mise √† jour de tous les champs disponibles
        for excel_col, var_name in field_mappings.items():
            if hasattr(app, var_name) and excel_col in societe_data:
                try:
                    getattr(app, var_name).set(societe_data[excel_col])
                except Exception as e:
                    print(f"Erreur lors de la mise √† jour du champ {excel_col}: {str(e)}")

        # Ajouter les boutons personnalis√©s pour la sauvegarde et la fermeture
        def save_and_close():
            try:
                # Supprimer l'ancienne entr√©e de la soci√©t√©
                self.df = self.df[self.df['DEN_STE'].str.strip() != str(den_ste).strip()]

                # Collecter et sauvegarder les nouvelles valeurs
                app.collect_values()  # S'assurer que toutes les valeurs sont collect√©es

                # Cr√©er une nouvelle ligne avec les valeurs mises √† jour
                new_row = {}
                for excel_col, var_name in field_mappings.items():
                    if hasattr(app, var_name):
                        new_row[excel_col] = getattr(app, var_name).get()

                # Ajouter la nouvelle ligne au DataFrame
                self.df = pd.concat([self.df, pd.DataFrame([new_row])], ignore_index=True)

                # Sauvegarder dans la base de donn√©es
                self.save_data()

                # Actualiser l'affichage
                self.refresh_data()

                messagebox.showinfo("Succ√®s", "Modifications enregistr√©es avec succ√®s!")
                edit_window.destroy()
                main_window.deiconify()

            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la sauvegarde : {str(e)}")

        def just_close():
            if messagebox.askyesno("Confirmation", "√ätes-vous s√ªr de vouloir fermer sans sauvegarder les modifications ?"):
                edit_window.destroy()
                main_window.deiconify()

        # Bouton de sauvegarde
        WidgetFactory.create_button(
            app.buttons_frame,
            text="üíæ Sauvegarder et Fermer",
            command=save_and_close,
            style='Secondary.TButton',
            tooltip="Sauvegarder les modifications et fermer la fen√™tre"
        ).grid(row=0, column=6, padx=5)

        # Bouton pour fermer sans sauvegarder
        WidgetFactory.create_button(
            app.buttons_frame,
            text="‚ùå Fermer sans sauvegarder",
            command=just_close,
            style='Secondary.TButton',
            tooltip="Fermer sans sauvegarder les modifications"
        ).grid(row=0, column=7, padx=5)

        # Configurer le gestionnaire de fermeture de fen√™tre
        edit_window.protocol("WM_DELETE_WINDOW", just_close)

    def delete_society(self):
        selected_item = self.societe_tree.selection()
        if not selected_item:
            messagebox.showwarning("Attention", "Veuillez s√©lectionner une soci√©t√© √† supprimer.")
            return

        if messagebox.askyesno("Confirmation", "√ätes-vous s√ªr de vouloir supprimer cette soci√©t√©?"):
            # R√©cup√©rer l'ID de la soci√©t√© √† partir de l'iid s√©lectionn√©
            societe_iid = selected_item[0]
            societe_id = societe_iid.split('_')[1]  # Extrait l'ID de la soci√©t√© du format "soc_ID"

            # Supprimer toutes les lignes correspondant √† cette soci√©t√©
            self.df = self.df[self.df['ID_SOCIETE'] != societe_id]

            # R√©initialiser les index du DataFrame
            self.df = self.df.reset_index(drop=True)

            # Sauvegarder dans Excel
            try:
                excel_file_path = Path(__file__).parent / 'databases' / 'DataBase_domiciliation.xlsx'

                if len(self.df) == 0:  # Si le DataFrame est vide
                    # Cr√©er un nouveau fichier vide
                    self.save_data(excel_file_path)
                else:
                    # Sauvegarder les donn√©es
                    with pd.ExcelWriter(excel_file_path, engine='openpyxl') as writer:
                        self.df.to_excel(writer, sheet_name="DataBaseDom", index=False)

                messagebox.showinfo("Succ√®s", "Soci√©t√© supprim√©e avec succ√®s!")
                self.refresh_data()
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la suppression: {str(e)}")

if __name__ == "__main__":
    root = tk.Tk()
    app = DomiciliationDashboard(root)
    root.mainloop()
