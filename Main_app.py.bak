import os
from datetime import datetime
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox, filedialog as fd
from tkcalendar import Calendar
from docxtpl import DocxTemplate
import openpyxl
from docx2pdf import convert
import pandas as pd

from utils import PathManager, ErrorHandler, ThemeManager, WidgetFactory, ToolTip, apply_style
from constants import (
    societe_headers, associe_headers, contrat_headers,
    excel_sheets, DenSte, Civility, Formjur, Nbmois,
    Capital, PartsSocial, Nationalite, SteAdresse,
    Tribunnaux, QualityGerant, Activities
)

# Configuration des chemins
PathManager.ensure_directories()

# Chargement des templates
docAnnonceJournal = DocxTemplate(PathManager.get_model_path("My_Annonce_Journal.docx"))
docAttestDomicil = DocxTemplate(PathManager.get_model_path("My_Attest_domiciliation.docx"))
docContratDomicil = DocxTemplate(PathManager.get_model_path("My_Contrat_domiciliation.docx"))
docDeclImmRc = DocxTemplate(PathManager.get_model_path("My_D√©cl_Imm_Rc.docx"))
docDepotLegalRc = DocxTemplate(PathManager.get_model_path("My_D√©pot_L√©gal.docx"))
docStatuts = DocxTemplate(PathManager.get_model_path("My_Statuts_SARL_AU.docx"))

# get the date of today
today = datetime.today()
date_inverser = today.strftime("%Y_%m_%d")

class DomiciliationApp:
    def __init__(self, root):
        self.root = root

        # Initialisation du dictionnaire avec toutes les cl√©s possibles
        self.values = {
            # Infos Soci√©t√©
            "DEN_STE": "", "FORME_JUR": "", "ICE": "", "DATE_ICE": "",
            "CAPITAL": "", "PART_SOCIAL": "", "STE_ADRESS": "", "TRIBUNAL": "",

            # Infos G√©rant (seront remplies depuis l'associ√©-g√©rant)
            "CIVIL": "", "PRENOM": "", "NOM": "", "CIN_NUM": "", "CIN_VALIDATY": "",
            "GERANT_QUALITY": "", "DATE_NAISS": "", "LIEU_NAISS": "",
            "GERANT_ADRESS": "", "NATIONALITY": "", "GERANT_PHONE": "", "GERANT_EMAIL": "",

            # Infos Contrat
            "DATE_CONTRAT": "", "PERIOD_DOMCIL": "", "PRIX_CONTRAT": "",
            "PRIX_INTERMEDIARE_CONTRAT": "", "DOM_DATEDEB": "", "DOM_DATEFIN": "",

            # Activit√©s (initialis√©es √† vide)
            "ACTIVITY1": "", "ACTIVITY2": "", "ACTIVITY3": "",
            "ACTIVITY4": "", "ACTIVITY5": "", "ACTIVITY6": ""
        }

        # Configuration du th√®me et de la fen√™tre
        if isinstance(root, tk.Tk):
            self.root.title("Gen√©rateurs Docs Juridiques")
            root_window = self.root
        else:
            root_window = root.winfo_toplevel()

        # Initialiser le gestionnaire de th√®me
        self.theme_manager = ThemeManager(root_window)
        self.style = self.theme_manager.style

        # Configuration des styles personnalis√©s
        self.setup_styles()

        # Helper pour appliquer les styles
        self.style_widget = lambda widget: apply_style(widget, self.theme_manager)

        # Liste pour stocker les informations des associ√©s
        self.associes_list = []

        self.setup_gui()

    def setup_styles(self):
        """Configure les styles personnalis√©s pour l'application"""
        # Style des onglets
        self.style.configure('TNotebook.Tab',
                           padding=(15, 5),
                           font=('Segoe UI', 10, 'bold'))

        # Style des sections
        self.style.configure('Section.TFrame',
                           padding=10,
                           relief='groove')

        # Style des labels de section
        self.style.configure('SectionTitle.TLabel',
                           font=('Segoe UI', 11, 'bold'),
                           padding=(0, 10))

        # Style des champs de formulaire
        self.style.configure('Field.TFrame',
                           padding=5)

        # Style des boutons d'action
        self.style.configure('Action.TButton',
                           padding=(10, 5),
                           font=('Segoe UI', 9))

    def setup_gui(self):
        # Create notebook for tabs
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True)

        # Create frames for each section
        self.frame_ste = ttk.Frame(self.notebook)
        self.frame_associes = ttk.Frame(self.notebook)
        self.frame_contrat = ttk.Frame(self.notebook)

        # Add frames to notebook
        self.notebook.add(self.frame_ste, text='Infos Soci√©t√©')
        self.notebook.add(self.frame_associes, text='Associ√©s')
        self.notebook.add(self.frame_contrat, text='Infos Contrat')

        # Initialize all frames
        self.initialize_ste_section()  # Initialize soci√©t√© section
        self.initialize_associes_frame() # Initialize associ√©s section
        self.initialize_contrat_frame() # Initialize contrat section

        # Create buttons frame at the bottom
        self.setup_buttons()

    def setup_buttons(self):
        # Conteneur principal pour les boutons
        self.buttons_frame = ttk.Frame(self.root)
        self.buttons_frame.pack(pady=15, side=tk.BOTTOM, fill=tk.X, padx=20)

        # Configuration de la grille pour l'alignement
        self.buttons_frame.grid_columnconfigure(2, weight=1)  # Espace flexible au milieu

        # Boutons principaux (√† gauche)
        WidgetFactory.create_button(
            self.buttons_frame,
            text="üìÑ Documents Word",
            command=self.generer_docs,
            style='Action.TButton',
            tooltip="G√©n√©rer tous les documents au format Word"
        ).grid(row=0, column=0, padx=5)

        WidgetFactory.create_button(
            self.buttons_frame,
            text="üìë Word et PDF",
            command=self.save_as_pdf,
            style='Action.TButton',
            tooltip="G√©n√©rer tous les documents en Word et PDF"
        ).grid(row=0, column=1, padx=5)

        # Boutons de contr√¥le (√† droite)
        WidgetFactory.create_button(
            self.buttons_frame,
            text="üÜï Nouvelle",
            command=self.clear_form,
            style='Secondary.TButton',
            tooltip="Effacer tous les champs pour une nouvelle soci√©t√©"
        ).grid(row=0, column=3, padx=5)

        WidgetFactory.create_button(
            self.buttons_frame,
            text="üíæ Sauvegarder",
            command=self.save_to_database,
            style='Secondary.TButton',
            tooltip="Sauvegarder les informations dans la base de donn√©es"
        ).grid(row=0, column=4, padx=5)

        WidgetFactory.create_button(
            self.buttons_frame,
            text="‚ùå Quitter",
            command=self.root.quit,
            style='Secondary.TButton',
            tooltip="Fermer l'application"
        ).grid(row=0, column=5, padx=5)

    def initialize_ste_section(self):
        # Initialiser le compteur de lignes
        current_row = 0

        # D√©nomination Soci√©t√©
        ttk.Label(self.frame_ste, text="D√©nomination Soci√©t√©").grid(row=current_row, column=0, padx=5, pady=5)
        self.den_ste_var = tk.StringVar()
        self.den_ste_combo = ttk.Combobox(self.frame_ste, textvariable=self.den_ste_var, values=DenSte, width=40)
        self.den_ste_combo.grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        ttk.Label(self.frame_ste, text="Forme Juridique").grid(row=current_row, column=0, padx=5, pady=5)
        self.forme_jur_var = tk.StringVar()
        self.forme_jur_combo = ttk.Combobox(self.frame_ste, textvariable=self.forme_jur_var, values=Formjur, width=40)
        self.forme_jur_combo.grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        ttk.Label(self.frame_ste, text="Ice").grid(row=current_row, column=0, padx=5, pady=5)
        self.ice_var = tk.StringVar()
        ttk.Entry(self.frame_ste, textvariable=self.ice_var, width=42).grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        ttk.Label(self.frame_ste, text="Date Ice").grid(row=current_row, column=0, padx=5, pady=5)
        self.date_ice_var = tk.StringVar()
        self.date_ice_entry = ttk.Entry(self.frame_ste, textvariable=self.date_ice_var, width=42)
        self.date_ice_entry.grid(row=current_row, column=1, padx=5, pady=5)
        ttk.Button(self.frame_ste, text="Choisir Date",
                  command=lambda: self.show_calendar(self.date_ice_var)).grid(row=current_row, column=2, padx=5, pady=5)
        current_row += 1

        # Capital
        ttk.Label(self.frame_ste, text="Capital").grid(row=current_row, column=0, padx=5, pady=5)
        self.capital_var = tk.StringVar()
        self.capital_combo = ttk.Combobox(self.frame_ste, textvariable=self.capital_var, values=Capital, width=40)
        self.capital_combo.grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        # Part Social
        ttk.Label(self.frame_ste, text="Part Social").grid(row=current_row, column=0, padx=5, pady=5)
        self.parts_social_var = tk.StringVar()
        self.parts_social_combo = ttk.Combobox(self.frame_ste, textvariable=self.parts_social_var,
                                             values=PartsSocial, width=40)
        self.parts_social_combo.grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        # Adresse Soci√©t√©
        ttk.Label(self.frame_ste, text="Adresse Soci√©t√©").grid(row=current_row, column=0, padx=5, pady=5)
        self.ste_adress_var = tk.StringVar()
        self.ste_adress_combo = ttk.Combobox(self.frame_ste, textvariable=self.ste_adress_var,
                                           values=SteAdresse, width=40)
        self.ste_adress_combo.grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        # Tribunal
        ttk.Label(self.frame_ste, text="Tribunal").grid(row=current_row, column=0, padx=5, pady=5)
        self.tribunal_var = tk.StringVar()
        self.tribunal_combo = ttk.Combobox(self.frame_ste, textvariable=self.tribunal_var,
                                        values=Tribunnaux, width=40)
        self.tribunal_combo.grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        # Activities Section avec titre stylis√©
        activities_label = ttk.Label(self.frame_ste, text="üè¢ Activit√©s de la Soci√©t√©",
                                   font=('Segoe UI', 10, 'bold'))
        activities_label.grid(row=current_row, column=0, columnspan=2, sticky="w", padx=5, pady=(15,5))

        # Frame d√©coratif pour les activit√©s
        activities_container = ttk.Frame(self.frame_ste, style='Card.TFrame')
        activities_container.grid(row=current_row+1, column=0, columnspan=2, sticky="ew", padx=5, pady=5)

        # Frame pour contenir la liste des activit√©s
        self.activities_frame = ttk.Frame(activities_container)
        self.activities_frame.pack(fill="both", expand=True, padx=5, pady=5)

        # Canvas et scrollbar pour la liste des activit√©s
        self.activities_canvas = tk.Canvas(self.activities_frame, height=150,
                                         background=self.theme_manager.colors['bg'])
        scrollbar = ttk.Scrollbar(self.activities_frame, orient="vertical",
                                command=self.activities_canvas.yview)
        self.activities_canvas.configure(yscrollcommand=scrollbar.set)

        # Frame int√©rieur pour les activit√©s
        self.activities_inner_frame = ttk.Frame(self.activities_canvas)
        self.activities_inner_frame.bind("<Configure>",
            lambda e: self.activities_canvas.configure(scrollregion=self.activities_canvas.bbox("all")))

        # Placer les widgets
        scrollbar.pack(side="right", fill="y")
        self.activities_canvas.pack(side="left", fill="both", expand=True)
        self.activities_canvas.create_window((0, 0), window=self.activities_inner_frame, anchor="nw")

        # Liste pour stocker les variables des activit√©s
        self.activity_vars = []

        # Boutons pour g√©rer les activit√©s avec style am√©lior√©
        buttons_frame = ttk.Frame(activities_container)
        buttons_frame.pack(fill="x", padx=5, pady=5)

        info_label = ttk.Label(buttons_frame,
                             text="Ajoutez jusqu'√† 6 activit√©s principales",
                             font=('Segoe UI', 9))
        info_label.pack(side="left", padx=5)

        add_button = WidgetFactory.create_button(
            buttons_frame,
            text="‚ûï Ajouter une activit√©",
            command=self.add_activity_field,
            style='Action.TButton',
            tooltip="Ajouter une nouvelle activit√© √† la soci√©t√©"
        )
        add_button.pack(side="right", padx=5)

        # Ajouter une premi√®re activit√© par d√©faut
        self.add_activity_field()

        current_row += 2

    def show_calendar(self, var):
        top = tk.Toplevel(self.root)
        cal = Calendar(top, selectmode='day', date_pattern='dd-mm-yyyy')
        cal.pack(padx=5, pady=5)

        def set_date():
            var.set(cal.get_date())
            top.destroy()

        ttk.Button(top, text="OK", command=set_date).pack(pady=5)

    # Removed initialize_gerant_frame as it's no longer needed in the new structure

    def initialize_associes_frame(self):
        # Titre stylis√© pour la section des associ√©s
        associes_label = ttk.Label(self.frame_associes, text="üë• Liste des Associ√©s",
                                 font=('Segoe UI', 12, 'bold'))
        associes_label.pack(pady=(15,10), padx=5)

        # Frame pour contenir la liste des associ√©s
        self.associes_container = ttk.Frame(self.frame_associes)
        self.associes_container.pack(fill="both", expand=True, padx=10, pady=5)

        # Canvas et scrollbar pour la liste des associ√©s
        self.associes_canvas = tk.Canvas(self.associes_container, height=500,
                                       background=self.theme_manager.colors['bg'])
        scrollbar = ttk.Scrollbar(self.associes_container, orient="vertical",
                                command=self.associes_canvas.yview)
        self.associes_canvas.configure(yscrollcommand=scrollbar.set)

        # Frame int√©rieur pour les associ√©s
        self.associes_inner_frame = ttk.Frame(self.associes_canvas)
        self.associes_inner_frame.bind("<Configure>",
            lambda e: self.associes_canvas.configure(scrollregion=self.associes_canvas.bbox("all")))

        # Placer les widgets
        scrollbar.pack(side="right", fill="y")
        self.associes_canvas.pack(side="left", fill="both", expand=True)
        self.associes_canvas.create_window((0, 0), window=self.associes_inner_frame, anchor="nw")

        # Boutons pour g√©rer les associ√©s
        buttons_frame = ttk.Frame(self.frame_associes)
        buttons_frame.pack(fill="x", padx=15, pady=(5, 15))

        ttk.Label(buttons_frame,
                text="Ajoutez les associ√©s de la soci√©t√©",
                font=('Segoe UI', 9, 'bold')).pack(side="left", padx=5)

        add_button = WidgetFactory.create_button(
            buttons_frame,
            text="‚ûï Ajouter un associ√©",
            command=self.add_associe,
            style='Action.TButton',
            tooltip="Ajouter un nouvel associ√© √† la soci√©t√©"
        )
        add_button.pack(side="right", padx=15)

        # Ajouter toujours un premier associ√© par d√©faut
        self.root.after(100, self.add_first_associe)

    def add_first_associe(self):
        """Ajoute toujours un premier associ√© par d√©faut"""
        if not self.associes_list:
            self.add_associe()

    def add_associe(self):
        """Ajoute un nouvel associ√© avec une disposition verticale"""
        # Frame principale avec style card et effet d'ombre
        associe_frame = ttk.Frame(self.associes_inner_frame, style='Card.TFrame')
        associe_frame.pack(fill="x", padx=20, pady=15)

        # Variables pour l'associ√©
        associe_vars = {
            'civil': tk.StringVar(),
            'prenom': tk.StringVar(),
            'nom': tk.StringVar(),
            'parts': tk.StringVar(),
            'nationality': tk.StringVar(),
            'cin_num': tk.StringVar(),
            'cin_validaty': tk.StringVar(),
            'adresse': tk.StringVar(),
            'date_naiss': tk.StringVar(),
            'lieu_naiss': tk.StringVar(),
            'phone': tk.StringVar(),
            'email': tk.StringVar(),
            'is_gerant': tk.BooleanVar(),
            'quality': tk.StringVar()
        }
        self.associes_list.append(associe_vars)

        # En-t√™te avec titre et r√¥le
        num = len(self.associes_list)
        header = ttk.Frame(associe_frame)
        header.pack(fill="x", padx=10, pady=10)

        # Titre et r√¥le
        title_section = ttk.Frame(header)
        title_section.pack(side="left")

        ttk.Label(title_section,
                text=f"üë§ Associ√© {num}",
                font=('Segoe UI', 11, 'bold')).pack(side="left")

        ttk.Label(title_section,
                text="Principal" if num == 1 else "Secondaire",
                font=('Segoe UI', 9),
                foreground='#666666').pack(side="left", padx=10)

        # Actions
        actions = ttk.Frame(header)
        actions.pack(side="right")

        # Conteneur principal pour les sections
        main_container = ttk.Frame(associe_frame)
        main_container.pack(fill="x", padx=20, pady=5)

        # Styles communs
        entry_width = 40

        # Section Informations de base
        info_section = ttk.LabelFrame(main_container)
        info_section.pack(fill="x", pady=5)
        
        ttk.Label(info_section, text="üìù Informations de base", **section_style).pack(
            anchor="w", padx=10, pady=5)

        # Container pour les champs
        info_fields = ttk.Frame(info_section)
        info_fields.pack(fill="x", padx=20, pady=5)

        # Civilit√©
        field_frame = ttk.Frame(info_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Civilit√©", **label_style).pack(anchor="w")
        civil_combo = ttk.Combobox(field_frame, textvariable=associe_vars['civil'],
                                values=Civility, width=entry_width)
        civil_combo.pack(fill="x", pady=(2, 0))

        # Pr√©nom
        field_frame = ttk.Frame(info_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Pr√©nom", **label_style).pack(anchor="w")
        prenom_entry = ttk.Entry(field_frame, textvariable=associe_vars['prenom'],
                              width=entry_width)
        prenom_entry.pack(fill="x", pady=(2, 0))
        ToolTip(prenom_entry, "Entrez le pr√©nom de l'associ√©")

        # Nom
        field_frame = ttk.Frame(info_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Nom", **label_style).pack(anchor="w")
        ttk.Entry(field_frame, textvariable=associe_vars['nom'],
                width=entry_width).pack(fill="x", pady=(2, 0))

        # Parts
        field_frame = ttk.Frame(info_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Parts (%)", **label_style).pack(anchor="w")
        ttk.Entry(field_frame, textvariable=associe_vars['parts'],
                width=entry_width).pack(fill="x", pady=(2, 0))

        # Section Identit√©
        identity_section = ttk.LabelFrame(main_container)
        identity_section.pack(fill="x", pady=5)
        
        ttk.Label(identity_section, text="ü™™ Identit√©", **section_style).pack(
            anchor="w", padx=10, pady=5)

        # Container pour les champs d'identit√©
        identity_fields = ttk.Frame(identity_section)
        identity_fields.pack(fill="x", padx=20, pady=5)

        # Nationalit√©
        field_frame = ttk.Frame(identity_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Nationalit√©", **label_style).pack(anchor="w")
        ttk.Combobox(field_frame, textvariable=associe_vars['nationality'],
                   values=Nationalite, width=entry_width).pack(fill="x", pady=(2, 0))

        # N¬∞ CIN
        field_frame = ttk.Frame(identity_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="N¬∞ CIN", **label_style).pack(anchor="w")
        ttk.Entry(field_frame, textvariable=associe_vars['cin_num'],
                width=entry_width).pack(fill="x", pady=(2, 0))

        # Validit√© CIN
        field_frame = ttk.Frame(identity_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Validit√© CIN", **label_style).pack(anchor="w")
        cin_frame = ttk.Frame(field_frame)
        cin_frame.pack(fill="x", pady=(2, 0))
        ttk.Entry(cin_frame, textvariable=associe_vars['cin_validaty'],
                width=35).pack(side="left")
        ttk.Button(cin_frame, text="üìÖ",
                 command=lambda: self.show_calendar(associe_vars['cin_validaty']),
                 style='Calendar.TButton').pack(side="left", padx=(5, 0))

        # Section Naissance
        birth_section = ttk.LabelFrame(main_container)
        birth_section.pack(fill="x", pady=5)
        
        ttk.Label(birth_section, text="üë∂ Naissance", **section_style).pack(
            anchor="w", padx=10, pady=5)

        # Container pour les champs de naissance
        birth_fields = ttk.Frame(birth_section)
        birth_fields.pack(fill="x", padx=20, pady=5)

        # Date de naissance
        field_frame = ttk.Frame(birth_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Date de naissance", **label_style).pack(anchor="w")
        date_frame = ttk.Frame(field_frame)
        date_frame.pack(fill="x", pady=(2, 0))
        ttk.Entry(date_frame, textvariable=associe_vars['date_naiss'],
                width=35).pack(side="left")
        ttk.Button(date_frame, text="üìÖ",
                 command=lambda: self.show_calendar(associe_vars['date_naiss']),
                 style='Calendar.TButton').pack(side="left", padx=(5, 0))

        # Lieu de naissance
        field_frame = ttk.Frame(birth_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Lieu de naissance", **label_style).pack(anchor="w")
        ttk.Entry(field_frame, textvariable=associe_vars['lieu_naiss'],
                width=entry_width).pack(fill="x", pady=(2, 0))

        # Section Contact
        contact_section = ttk.LabelFrame(main_container)
        contact_section.pack(fill="x", pady=5)
        
        ttk.Label(contact_section, text="üìû Contact", **section_style).pack(
            anchor="w", padx=10, pady=5)

        # Container pour les champs de contact
        contact_fields = ttk.Frame(contact_section)
        contact_fields.pack(fill="x", padx=20, pady=5)

        # Adresse
        field_frame = ttk.Frame(contact_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Adresse", **label_style).pack(anchor="w")
        ttk.Entry(field_frame, textvariable=associe_vars['adresse'],
                width=entry_width).pack(fill="x", pady=(2, 0))

        # T√©l√©phone
        field_frame = ttk.Frame(contact_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="T√©l√©phone", **label_style).pack(anchor="w")
        ttk.Entry(field_frame, textvariable=associe_vars['phone'],
                width=entry_width).pack(fill="x", pady=(2, 0))

        # Email
        field_frame = ttk.Frame(contact_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Email", **label_style).pack(anchor="w")
        ttk.Entry(field_frame, textvariable=associe_vars['email'],
                width=entry_width).pack(fill="x", pady=(2, 0))

        # Section G√©rant
        gerant_section = ttk.LabelFrame(main_container)
        gerant_section.pack(fill="x", pady=5)
        
        ttk.Label(gerant_section, text="üëî Statut de G√©rant", **section_style).pack(
            anchor="w", padx=10, pady=5)

        # Container pour les champs de g√©rant
        gerant_fields = ttk.Frame(gerant_section)
        gerant_fields.pack(fill="x", padx=20, pady=5)

        # Est g√©rant
        field_frame = ttk.Frame(gerant_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Checkbutton(field_frame, text="Est G√©rant",
                      variable=associe_vars['is_gerant']).pack(anchor="w")

        # Qualit√©
        field_frame = ttk.Frame(gerant_fields)
        field_frame.pack(fill="x", pady=5)
        ttk.Label(field_frame, text="Qualit√©", **label_style).pack(anchor="w")
        quality_combo = ttk.Combobox(field_frame, textvariable=associe_vars['quality'],
                                  values=QualityGerant, width=entry_width, state='disabled')
        quality_combo.pack(fill="x", pady=(2, 0))

        # Fonction pour activer/d√©sactiver les champs de g√©rant
        def toggle_gerant_fields(*args):
            state = 'normal' if associe_vars['is_gerant'].get() else 'disabled'
            quality_combo['state'] = state

        associe_vars['is_gerant'].trace_add('write', toggle_gerant_fields)

        # Bouton de suppression
        delete_btn = WidgetFactory.create_button(
            actions,
            text="üóëÔ∏è Supprimer",
            command=lambda: self.remove_associe(associe_frame, associe_vars),
            style='Danger.TButton',
            tooltip="Supprimer cet associ√©"
        )
        delete_btn.pack(side="right", padx=(5, 0))

        # Indicateur de statut
        if associe_vars['is_gerant'].get():
            ttk.Label(actions,
                    text="üëë G√©rant",
                    font=('Segoe UI', 9),
                    foreground='#228B22').pack(side="right", padx=10)

    def update_associes_numbers(self):
        """Met √† jour les num√©ros des associ√©s"""
        for i, frame in enumerate(self.associes_inner_frame.winfo_children(), 1):
            header = frame.winfo_children()[0]  # Le premier enfant est le header_frame
            for widget in header.winfo_children():
                if isinstance(widget, ttk.Label):
                    widget.config(text=f"Associ√© {i}")

    def initialize_contrat_frame(self):
        current_row = 0
        # Date Contrat
        ttk.Label(self.frame_contrat, text="Date Contrat").grid(row=current_row, column=0, padx=5, pady=5)
        self.date_contrat_var = tk.StringVar()
        self.date_contrat_entry = ttk.Entry(self.frame_contrat, textvariable=self.date_contrat_var, width=42)
        self.date_contrat_entry.grid(row=current_row, column=1, padx=5, pady=5)
        ttk.Button(self.frame_contrat, text="Choisir Date",
                  command=lambda: self.show_calendar(self.date_contrat_var)).grid(row=current_row, column=2, padx=5, pady=5)
        current_row += 1

        # P√©riode de Contrat
        ttk.Label(self.frame_contrat, text="P√©riode de Contrat").grid(row=current_row, column=0, padx=5, pady=5)
        self.period_var = tk.StringVar()
        self.period_combo = ttk.Combobox(self.frame_contrat, textvariable=self.period_var, values=Nbmois, width=40)
        self.period_combo.grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        # Prix mensuel
        ttk.Label(self.frame_contrat, text="Prix mensuel de Contrat").grid(row=current_row, column=0, padx=5, pady=5)
        self.prix_mensuel_var = tk.StringVar()
        ttk.Entry(self.frame_contrat, textvariable=self.prix_mensuel_var, width=42).grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        # Prix intermediaire
        ttk.Label(self.frame_contrat, text="Prix intermediaire Contrat").grid(row=current_row, column=0, padx=5, pady=5)
        self.prix_inter_var = tk.StringVar()
        ttk.Entry(self.frame_contrat, textvariable=self.prix_inter_var, width=42).grid(row=current_row, column=1, padx=5, pady=5)
        current_row += 1

        # Date D√©but Contrat
        ttk.Label(self.frame_contrat, text="Date D√©but Contrat").grid(row=current_row, column=0, padx=5, pady=5)
        self.date_debut_var = tk.StringVar()
        self.date_debut_entry = ttk.Entry(self.frame_contrat, textvariable=self.date_debut_var, width=42)
        self.date_debut_entry.grid(row=current_row, column=1, padx=5, pady=5)
        ttk.Button(self.frame_contrat, text="Choisir Date",
                  command=lambda: self.show_calendar(self.date_debut_var)).grid(row=current_row, column=2, padx=5, pady=5)
        current_row += 1

        # Date Fin Contrat
        ttk.Label(self.frame_contrat, text="Date Fin Contrat").grid(row=current_row, column=0, padx=5, pady=5)
        self.date_fin_var = tk.StringVar()
        self.date_fin_entry = ttk.Entry(self.frame_contrat, textvariable=self.date_fin_var, width=42)
        self.date_fin_entry.grid(row=current_row, column=1, padx=5, pady=5)
        ttk.Button(self.frame_contrat, text="Choisir Date",
                  command=lambda: self.show_calendar(self.date_fin_var)).grid(row=current_row, column=2, padx=5, pady=5)
        current_row += 1

    def add_activity_field(self):
        """Ajoute un nouveau champ d'activit√©"""
        # V√©rifier le nombre maximum d'activit√©s
        if len(self.activity_vars) >= 6:
            messagebox.showwarning("Limite atteinte",
                                 "Vous ne pouvez pas ajouter plus de 6 activit√©s.")
            return

        # Cr√©er un cadre stylis√© pour l'activit√©
        frame = ttk.Frame(self.activities_inner_frame, style='Card.TFrame')
        frame.pack(fill="x", padx=5, pady=3)

        # Cr√©er une nouvelle variable pour l'activit√©
        var = tk.StringVar()
        self.activity_vars.append(var)

        # Label num√©rot√©
        num_label = ttk.Label(frame,
                             text=f"Activit√© {len(self.activity_vars)}",
                             font=('Segoe UI', 9))
        num_label.pack(side="left", padx=(5, 10))

        # Cr√©er le combobox avec style am√©lior√©
        combo = ttk.Combobox(frame, textvariable=var,
                            values=Activities, width=35,
                            font=('Segoe UI', 9))
        combo.pack(side="left", padx=(0, 5), pady=2)
        combo.bind('<FocusIn>', lambda e: combo.selection_clear())

        # Bouton de suppression stylis√©
        def remove_activity():
            if messagebox.askyesno("Confirmation",
                                 "Voulez-vous vraiment supprimer cette activit√© ?"):
                self.activity_vars.remove(var)
                frame.destroy()
                # Mettre √† jour les num√©ros des activit√©s
                for i, child in enumerate(self.activities_inner_frame.winfo_children(), 1):
                    for widget in child.winfo_children():
                        if isinstance(widget, ttk.Label):
                            widget.config(text=f"Activit√© {i}")

        delete_btn = WidgetFactory.create_button(
            frame,
            text="üóëÔ∏è",
            command=remove_activity,
            style='Danger.TButton',
            tooltip="Supprimer cette activit√©"
        )
        delete_btn.pack(side="right", padx=5, pady=2)

        # Mettre √† jour le scrollregion
        self.activities_canvas.update_idletasks()
        self.activities_canvas.configure(scrollregion=self.activities_canvas.bbox("all"))

    def collect_values(self):
        """Collect all values from the form fields"""
        try:
            # Infos Soci√©t√©
            self.values.update({
                "DEN_STE": self.den_ste_var.get(),
                "FORME_JUR": self.forme_jur_var.get(),
                "ICE": self.ice_var.get(),
                "DATE_ICE": self.date_ice_var.get(),
                "CAPITAL": self.capital_var.get(),
                "PART_SOCIAL": self.parts_social_var.get(),
                "STE_ADRESS": self.ste_adress_var.get(),
                "TRIBUNAL": self.tribunal_var.get()
            })

            # Chercher le g√©rant parmi les associ√©s
            gerant = next((associe for associe in self.associes_list if associe['is_gerant'].get()), None)

            # Si un g√©rant est trouv√©, mettre √† jour ses informations
            if gerant:
                self.values.update({
                    "CIVIL": gerant['civil'].get(),
                    "PRENOM": gerant['prenom'].get(),
                    "NOM": gerant['nom'].get(),
                    "CIN_NUM": gerant['cin_num'].get(),
                    "CIN_VALIDATY": gerant['cin_validaty'].get(),
                    "GERANT_QUALITY": gerant['quality'].get(),
                    "DATE_NAISS": gerant['date_naiss'].get(),
                    "LIEU_NAISS": gerant['lieu_naiss'].get(),
                    "GERANT_ADRESS": gerant['adresse'].get(),
                    "NATIONALITY": gerant['nationality'].get(),
                    "GERANT_PHONE": gerant['phone'].get(),
                    "GERANT_EMAIL": gerant['email'].get()
                })

            # Infos Contrat
            self.values.update({
                "DATE_CONTRAT": self.date_contrat_var.get(),
                "PERIOD_DOMCIL": self.period_var.get(),
                "PRIX_CONTRAT": self.prix_mensuel_var.get(),
                "PRIX_INTERMEDIARE_CONTRAT": self.prix_inter_var.get(),
                "DOM_DATEDEB": self.date_debut_var.get(),
                "DOM_DATEFIN": self.date_fin_var.get()
            })

            # Add activities
            for i, var in enumerate(self.activity_vars, 1):
                self.values[f"ACTIVITY{i}"] = var.get()
                if i >= 6:  # Limiter √† 6 activit√©s maximum pour la compatibilit√©
                    break

        except Exception as e:
            ErrorHandler.handle_error(e, "Erreur lors de la collecte des valeurs")

        # Add associ√©s
        for i, associe in enumerate(self.associes_list, 1):
            prefix = f"ASSOCIE{i}_"
            self.values[f"{prefix}CIVIL"] = associe['civil'].get()
            self.values[f"{prefix}PRENOM"] = associe['prenom'].get()
            self.values[f"{prefix}NOM"] = associe['nom'].get()
            self.values[f"{prefix}PARTS"] = associe['parts'].get()
            self.values[f"{prefix}NATIONALITY"] = associe['nationality'].get()
            self.values[f"{prefix}CIN_NUM"] = associe['cin_num'].get()
            self.values[f"{prefix}CIN_VALIDATY"] = associe['cin_validaty'].get()
            self.values[f"{prefix}ADRESSE"] = associe['adresse'].get()
            self.values[f"{prefix}DATE_NAISS"] = associe['date_naiss'].get()
            self.values[f"{prefix}LIEU_NAISS"] = associe['lieu_naiss'].get()
            self.values[f"{prefix}PHONE"] = associe['phone'].get()
            self.values[f"{prefix}EMAIL"] = associe['email'].get()
            self.values[f"{prefix}IS_GERANT"] = "Oui" if associe['is_gerant'].get() else "Non"
            self.values[f"{prefix}QUALITY"] = associe['quality'].get() if associe['is_gerant'].get() else ""

    def get_next_id(self, workbook, sheet_name):
        """Get the next available ID for a given sheet"""
        if sheet_name not in workbook.sheetnames:
            workbook.create_sheet(sheet_name)
            sheet = workbook[sheet_name]
            sheet.append(excel_sheets[sheet_name])  # Ajouter les en-t√™tes
            return 1

        sheet = workbook[sheet_name]
        if sheet.max_row == 1:  # Seulement les en-t√™tes
            return 1
        # Trouver le plus grand ID et ajouter 1
        id_column = sheet['A']  # La colonne ID est toujours la premi√®re
        max_id = max(int(cell.value or 0) for cell in id_column[1:])  # Ignorer l'en-t√™te
        return max_id + 1

    def save_to_sheet(self, workbook, sheet_name, data, headers):
        """Save data to a specific sheet"""
        if sheet_name not in workbook.sheetnames:
            workbook.create_sheet(sheet_name)
            sheet = workbook[sheet_name]
            sheet.append(headers)
        else:
            sheet = workbook[sheet_name]
            if sheet.max_row == 0:
                sheet.append(headers)

        # Pr√©parer les donn√©es dans l'ordre des en-t√™tes
        row_data = [data.get(header, '') for header in headers]
        sheet.append(row_data)

    def insert_data_to_excel(self):
        """Insert form data into Excel file with multiple sheets"""
        try:
            excel_file_path = os.path.join(os.path.dirname(__file__), 'databases', 'DataBase_domiciliation.xlsx')
            os.makedirs(os.path.dirname(excel_file_path), exist_ok=True)

            if not os.path.exists(excel_file_path):
                workbook = openpyxl.Workbook()
                workbook.save(excel_file_path)

            workbook = openpyxl.load_workbook(excel_file_path)

            # Cr√©er ou obtenir l'ID de la soci√©t√©
            societe_id = self.get_next_id(workbook, "Societes")

            # Donn√©es de la soci√©t√©
            societe_data = {
                "ID_SOCIETE": societe_id,
                "DEN_STE": self.values.get("DEN_STE"),
                "FORME_JUR": self.values.get("FORME_JUR"),
                "ICE": self.values.get("ICE"),
                "DATE_ICE": self.values.get("DATE_ICE"),
                "CAPITAL": self.values.get("CAPITAL"),
                "PART_SOCIAL": self.values.get("PART_SOCIAL"),
                "STE_ADRESS": self.values.get("STE_ADRESS"),
                "TRIBUNAL": self.values.get("TRIBUNAL")
            }

            # Sauvegarder les donn√©es de la soci√©t√©
            self.save_to_sheet(workbook, "Societes", societe_data, societe_headers)

            # Sauvegarder les donn√©es des associ√©s
            for i, associe in enumerate(self.associes_list, 1):
                associe_id = self.get_next_id(workbook, "Associes")
                prefix = f"ASSOCIE{i}_"
                associe_data = {
                    "ID_ASSOCIE": associe_id,
                    "ID_SOCIETE": societe_id,
                    "CIVIL": self.values.get(f"{prefix}CIVIL"),
                    "PRENOM": self.values.get(f"{prefix}PRENOM"),
                    "NOM": self.values.get(f"{prefix}NOM"),
                    "NATIONALITY": self.values.get(f"{prefix}NATIONALITY"),
                    "CIN_NUM": self.values.get(f"{prefix}CIN_NUM"),
                    "CIN_VALIDATY": self.values.get(f"{prefix}CIN_VALIDATY"),
                    "DATE_NAISS": self.values.get(f"{prefix}DATE_NAISS"),
                    "LIEU_NAISS": self.values.get(f"{prefix}LIEU_NAISS"),
                    "ADRESSE": self.values.get(f"{prefix}ADRESSE"),
                    "PHONE": self.values.get(f"{prefix}PHONE"),
                    "EMAIL": self.values.get(f"{prefix}EMAIL"),
                    "PARTS": self.values.get(f"{prefix}PARTS"),
                    "IS_GERANT": self.values.get(f"{prefix}IS_GERANT"),
                    "QUALITY": self.values.get(f"{prefix}QUALITY")
                }
                self.save_to_sheet(workbook, "Associes", associe_data, associe_headers)

            # Sauvegarder les donn√©es du contrat
            contrat_id = self.get_next_id(workbook, "Contrats")
            contrat_data = {
                "ID_CONTRAT": contrat_id,
                "ID_SOCIETE": societe_id,
                "DATE_CONTRAT": self.values.get("DATE_CONTRAT"),
                "PERIOD_DOMCIL": self.values.get("PERIOD_DOMCIL"),
                "PRIX_CONTRAT": self.values.get("PRIX_CONTRAT"),
                "PRIX_INTERMEDIARE_CONTRAT": self.values.get("PRIX_INTERMEDIARE_CONTRAT"),
                "DOM_DATEDEB": self.values.get("DOM_DATEDEB"),
                "DOM_DATEFIN": self.values.get("DOM_DATEFIN")
            }
            self.save_to_sheet(workbook, "Contrats", contrat_data, contrat_headers)

            workbook.save(excel_file_path)

        except Exception as e:
            messagebox.showerror("Erreur",
                f"Erreur lors de l'insertion dans Excel : {str(e)}")

    def generer_docs(self):
        """Handle document generation with custom save location"""
        try:
            self.collect_values()

            # Validation des champs obligatoires
            if not self.values['DEN_STE']:
                messagebox.showerror("Erreur", "Veuillez entrer un nom de soci√©t√©!")
                return

            # Demander l'emplacement de sauvegarde
            folder_name = f"{date_inverser}_DCons_{self.values['DEN_STE']}"
            folder_path = fd.askdirectory(
                title="Choisir l'emplacement pour sauvegarder les documents Word"
            )

            if not folder_path:  # L'utilisateur a annul√©
                return

            # Cr√©er le dossier pour les documents
            folder_path = os.path.join(folder_path, folder_name)
            os.makedirs(folder_path, exist_ok=True)

            # G√©n√©ration des documents Word
            documents = {
                'Annonce_l√©gale': docAnnonceJournal,
                'Attestation_Domiciliation': docAttestDomicil,
                'Contrat_Domiciliation': docContratDomicil,
                'D√©claration_Imm_Rc': docDeclImmRc,
                'D√©pot_l√©gal': docDepotLegalRc,
                'Statuts': docStatuts
            }

            # G√©n√©ration des documents avec gestion d'erreurs pour chaque fichier
            for doc_name, template in documents.items():
                try:
                    template.render(self.values)
                    output_path = os.path.join(folder_path,
                        f"{date_inverser}_{doc_name}_{self.values['DEN_STE']}.docx")
                    template.save(output_path)
                except Exception as doc_error:
                    ErrorHandler.handle_error(doc_error, f"Erreur lors de la g√©n√©ration du document {doc_name}")
                    continue  # Continuer avec les autres documents m√™me si un √©choue

            messagebox.showinfo("Succ√®s",
                f"Documents cr√©√©s avec succ√®s dans le dossier:\n{folder_path}")

            # Ouvrir le dossier contenant les documents
            os.startfile(folder_path)

        except Exception as e:
            ErrorHandler.handle_error(e, "Erreur lors de la g√©n√©ration des documents")

    def save_as_pdf(self):
        """Generate or convert documents to PDF with custom save location"""
        try:
            self.collect_values()

            # Validation des champs obligatoires
            if not self.values['DEN_STE']:
                messagebox.showerror("Erreur", "Veuillez entrer un nom de soci√©t√©!")
                return

            # Demander l'emplacement de sauvegarde
            folder_name = f"{date_inverser}_DCons_{self.values['DEN_STE']}"
            folder_path = fd.askdirectory(
                title="Choisir l'emplacement pour sauvegarder les documents"
            )

            if not folder_path:  # L'utilisateur a annul√©
                return

            # Cr√©er les sous-dossiers pour Word et PDF
            base_folder = os.path.join(folder_path, folder_name)
            word_folder = os.path.join(base_folder, "Word")
            pdf_folder = os.path.join(base_folder, "PDF")
            os.makedirs(word_folder, exist_ok=True)
            os.makedirs(pdf_folder, exist_ok=True)

            # G√©n√©ration des documents Word et PDF
            documents = {
                'Annonce_l√©gale': docAnnonceJournal,
                'Attestation_Domiciliation': docAttestDomicil,
                'Contrat_Domiciliation': docContratDomicil,
                'D√©claration_Imm_Rc': docDeclImmRc,
                'D√©pot_l√©gal': docDepotLegalRc,
                'Statuts': docStatuts
            }

            successful_conversions = []
            failed_conversions = []

            for doc_name, template in documents.items():
                try:
                    # G√©n√©rer le document Word
                    template.render(self.values)
                    docx_path = os.path.join(word_folder,
                        f"{date_inverser}_{doc_name}_{self.values['DEN_STE']}.docx")
                    pdf_path = os.path.join(pdf_folder,
                        f"{date_inverser}_{doc_name}_{self.values['DEN_STE']}.pdf")

                    # Sauvegarder en Word
                    template.save(docx_path)

                    # Convertir en PDF
                    convert(docx_path, pdf_path)
                    successful_conversions.append(doc_name)

                except Exception as doc_error:
                    ErrorHandler.handle_error(doc_error, f"Erreur lors de la g√©n√©ration/conversion du document {doc_name}")
                    failed_conversions.append(doc_name)
                    continue  # Continuer avec les autres documents

            # Afficher le r√©sum√© des op√©rations
            if successful_conversions:
                success_message = f"Documents g√©n√©r√©s avec succ√®s dans le dossier:\n{base_folder}"
                if failed_conversions:
                    success_message += f"\n\nCertains documents n'ont pas pu √™tre convertis: {', '.join(failed_conversions)}"
                messagebox.showinfo("Succ√®s", success_message)

                # Ouvrir le dossier contenant les documents
                os.startfile(base_folder)
            else:
                messagebox.showerror("Erreur", "Aucun document n'a pu √™tre g√©n√©r√©.")

        except Exception as e:
            ErrorHandler.handle_error(e, "Erreur lors de la g√©n√©ration et conversion des documents")

    def save_to_database(self):
        """Save current form data to database"""
        try:
            self.collect_values()

            if not self.values['DEN_STE']:
                messagebox.showerror("Erreur", "Veuillez entrer un nom de soci√©t√©!")
                return

            # V√©rifier si une soci√©t√© avec le m√™me nom existe d√©j√†
            excel_file_path = os.path.join(os.path.dirname(__file__), 'databases', 'DataBase_domiciliation.xlsx')
            if os.path.exists(excel_file_path):
                existing_df = pd.read_excel(excel_file_path, sheet_name="DataBaseDom")
                if not existing_df.empty and self.values['DEN_STE'] in existing_df['DEN_STE'].values:
                    messagebox.showerror("Erreur", "Une soci√©t√© avec ce nom existe d√©j√† dans la base de donn√©es!")
                    return

            self.insert_data_to_excel()
            messagebox.showinfo("Succ√®s", "Donn√©es sauvegard√©es avec succ√®s dans la base de donn√©es!")

        except Exception as e:
            messagebox.showerror("Erreur",
                f"Erreur lors de la sauvegarde dans la base de donn√©es : {str(e)}")

    def clear_form(self):
        """Clear all form fields"""
        # Clear main fields
        for var_name in ['den_ste_var', 'forme_jur_var', 'ice_var', 'date_ice_var',
                        'capital_var', 'part_social_var', 'ste_adress_var', 'tribunal_var',
                        'date_contrat_var', 'period_var', 'prix_contrat_var', 'prix_intermediaire_var',
                        'date_debut_var', 'date_fin_var']:
            if hasattr(self, var_name):
                getattr(self, var_name).set('')

        # Clear activities
        for frame in self.activities_inner_frame.winfo_children():
            frame.destroy()
        self.activity_vars.clear()
        # Ajouter une nouvelle activit√© vide
        self.add_activity_field()

        # Clear associ√©s
        for frame in self.associes_inner_frame.winfo_children():
            frame.destroy()
        self.associes_list.clear()
        # Ajouter un nouvel associ√© vide si c'est une SARL
        if self.forme_jur_var.get() == "SARL":
            self.add_associe()

# Create and run the application
if __name__ == "__main__":
    root = tk.Tk()
    root.geometry("1200x800")
    app = DomiciliationApp(root)
    root.mainloop()
